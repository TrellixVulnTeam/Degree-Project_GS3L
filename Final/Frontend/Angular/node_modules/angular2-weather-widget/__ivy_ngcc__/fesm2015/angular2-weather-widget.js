import { Injectable, NgModule, Component, Input, defineInjectable, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
import * as ɵngcc2 from '@angular/common';

const _c0 = function (a0, a1) { return { "color": a0, "font-size": a1 }; };
function AngularWeatherWidgetComponent_span_1_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵelementStart(1, "p", 3);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction2(2, _c0, ctx_r2.statusFontColor, ctx_r2.statusFontSize));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r2.weatherDetails == null ? null : ctx_r2.weatherDetails.weather_descriptions, " ");
} }
const _c1 = function (a0, a1) { return { "width": a0, "height": a1 }; };
function AngularWeatherWidgetComponent_span_1_div_5_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵelement(1, "img", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("src", ctx_r6.weatherDetails == null ? null : ctx_r6.weatherDetails.icon, ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction2(2, _c1, ctx_r6.weatherImageWidth, ctx_r6.weatherImageHeight));
} }
function AngularWeatherWidgetComponent_span_1_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵelementStart(1, "p", 3);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, AngularWeatherWidgetComponent_span_1_div_5_div_3_Template, 2, 5, "div", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction2(3, _c0, ctx_r3.tempratureFontColor, ctx_r3.tempratureFontSize));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r3.weatherDetails == null ? null : ctx_r3.weatherDetails.temperature, "\u00B0 F ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.weatherImages);
} }
function AngularWeatherWidgetComponent_span_1_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "p", 3);
    ɵngcc0.ɵɵtext(2, "Wind");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "p", 13);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction2(3, _c0, ctx_r4.windFontColor, ctx_r4.windFontSize));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction2(6, _c0, ctx_r4.windFontColor, ctx_r4.windFontSize));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r4.weatherDetails == null ? null : ctx_r4.weatherDetails.wind_speed, " MPH ");
} }
function AngularWeatherWidgetComponent_span_1_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "p", 3);
    ɵngcc0.ɵɵtext(2, "Humidity");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "p", 13);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction2(3, _c0, ctx_r5.humidityFontColor, ctx_r5.humidityFontSize));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction2(6, _c0, ctx_r5.humidityFontColor, ctx_r5.humidityFontSize));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r5.weatherDetails == null ? null : ctx_r5.weatherDetails.humidity, " %");
} }
const _c2 = function (a0, a1) { return { "font-size": a0, "color": a1 }; };
function AngularWeatherWidgetComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "div", 2);
    ɵngcc0.ɵɵelementStart(2, "p", 3);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, AngularWeatherWidgetComponent_span_1_div_4_Template, 3, 5, "div", 4);
    ɵngcc0.ɵɵtemplate(5, AngularWeatherWidgetComponent_span_1_div_5_Template, 4, 6, "div", 5);
    ɵngcc0.ɵɵtemplate(6, AngularWeatherWidgetComponent_span_1_div_6_Template, 5, 9, "div", 6);
    ɵngcc0.ɵɵtemplate(7, AngularWeatherWidgetComponent_span_1_div_7_Template, 5, 9, "div", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction2(6, _c2, ctx_r0.locationFontSize, ctx_r0.locationFontColor));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.weatherDetails == null ? null : ctx_r0.weatherDetails.location);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.status);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.temperature);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isWind);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isHumidity);
} }
function AngularWeatherWidgetComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "div", 14);
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(2, "svg", 15);
    ɵngcc0.ɵɵelementStart(3, "circle", 16);
    ɵngcc0.ɵɵelement(4, "animateTransform", 17);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
const _c3 = function (a0, a1, a2, a3, a4) { return { "width": a0, "height": a1, "background-color": a2, "box-shadow": a3, "border-radius": a4 }; };
const API = 'https://api.openweathermap.org/data/2.5/weather?';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AngularWeatherWidgetService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} isGeoLocation
     * @param {?} location
     * @param {?} APIKEY
     * @return {?}
     */
    getWeatherDetails(isGeoLocation, location, APIKEY) {
        if (isGeoLocation) {
            return this.http.get(`${API}${location}&units=imperial&appid=${APIKEY}`);
        }
        else {
            return this.http.get(`${API}q=${location}&units=imperial&appid=${APIKEY}`);
        }
    }
}
AngularWeatherWidgetService.ɵfac = function AngularWeatherWidgetService_Factory(t) { return new (t || AngularWeatherWidgetService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
AngularWeatherWidgetService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AngularWeatherWidgetService, factory: AngularWeatherWidgetService.ɵfac, providedIn: 'root' });
/** @nocollapse */
AngularWeatherWidgetService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ AngularWeatherWidgetService.ngInjectableDef = defineInjectable({ factory: function AngularWeatherWidgetService_Factory() { return new AngularWeatherWidgetService(inject(HttpClient)); }, token: AngularWeatherWidgetService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularWeatherWidgetService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AngularWeatherWidgetComponent {
    /**
     * @param {?} ws
     */
    constructor(ws) {
        this.ws = ws;
        this.height = 'auto';
        this.width = '425px';
        this.backgroundColor = 'rgb(10 10 111)';
        this.isBoxShadow = true;
        this.borderRadius = '5px';
        this.locationFontSize = '40px';
        this.locationFontColor = '#fff';
        this.status = true;
        this.statusFontColor = '#fff';
        this.statusFontSize = '18px';
        this.temperature = true;
        this.tempratureFontColor = '#fff';
        this.tempratureFontSize = '80px';
        this.weatherImages = true;
        this.weatherImageWidth = '100px';
        this.weatherImageHeight = '100px';
        this.geoLocation = false;
        this.location = '';
        this.isWind = true;
        this.isHumidity = true;
        this.windFontColor = '#fff';
        this.windFontSize = '20px';
        this.humidityFontColor = '#fff';
        this.humidityFontSize = '20px';
        this.isLoading = true;
        this.weatherDetails = {
            location: '',
            weather_descriptions: '',
            temperature: '',
            icon: '',
            wind_speed: '',
            humidity: ''
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.checkLocation();
    }
    /**
     * \@description Check whether geolocation or manually added location.
     * @return {?}
     */
    checkLocation() {
        if (this.geoLocation) {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition((/**
                 * @param {?} position
                 * @return {?}
                 */
                (position) => {
                    /** @type {?} */
                    var lat = position.coords.latitude;
                    /** @type {?} */
                    var long = position.coords.longitude;
                    this.location = `lat=${lat}&lon=${long}`;
                    this.getWeather(true);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    console.warn(error.message);
                }));
            }
            else {
                console.warn(`It seems like Geolocation, which is required for this page, is not enabled in your browser.
        Please use a browser which supports it.`);
            }
        }
        else if (!this.geoLocation && this.location.length < 1) {
            console.warn('Provide  a valid location');
        }
        else {
            this.getWeather(false);
        }
    }
    /**
     * @param {?} isGeoLocation
     * @return {?}
     */
    getWeather(isGeoLocation) {
        if (this.APIKEY) {
            this.ws.getWeatherDetails(isGeoLocation, this.location, this.APIKEY).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                this.weatherDetails = {
                    location: response.name,
                    weather_descriptions: response.weather[0].description,
                    temperature: response.main.temp,
                    icon: `http://openweathermap.org/img/wn/${response.weather[0].icon}@2x.png`,
                    wind_speed: response.wind.speed,
                    humidity: response.main.humidity
                };
                this.isLoading = false;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            err => {
                console.warn(err.error.error.message);
            }));
        }
        else {
            console.warn('Invalid APIKEY');
        }
    }
}
AngularWeatherWidgetComponent.ɵfac = function AngularWeatherWidgetComponent_Factory(t) { return new (t || AngularWeatherWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(AngularWeatherWidgetService)); };
AngularWeatherWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AngularWeatherWidgetComponent, selectors: [["angular-weather-widget"]], inputs: { height: "height", width: "width", backgroundColor: "backgroundColor", isBoxShadow: "isBoxShadow", borderRadius: "borderRadius", locationFontSize: "locationFontSize", locationFontColor: "locationFontColor", status: "status", statusFontColor: "statusFontColor", statusFontSize: "statusFontSize", temperature: "temperature", tempratureFontColor: "tempratureFontColor", tempratureFontSize: "tempratureFontSize", weatherImages: "weatherImages", weatherImageWidth: "weatherImageWidth", weatherImageHeight: "weatherImageHeight", geoLocation: "geoLocation", location: "location", isWind: "isWind", isHumidity: "isHumidity", windFontColor: "windFontColor", windFontSize: "windFontSize", humidityFontColor: "humidityFontColor", humidityFontSize: "humidityFontSize", APIKEY: "APIKEY" }, decls: 3, vars: 9, consts: [[1, "container", 3, "ngStyle"], [4, "ngIf"], [1, "location"], [3, "ngStyle"], ["class", "status", 4, "ngIf"], ["class", "temp", 4, "ngIf"], ["class", "details", 4, "ngIf"], [1, "status"], [1, "temp"], ["class", "weather-images", 4, "ngIf"], [1, "weather-images"], ["alt", "weather-icon", 3, "ngStyle", "src"], [1, "details"], [1, "wind", 3, "ngStyle"], [1, "loading"], ["xmlns", "http://www.w3.org/2000/svg", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink", "width", "50px", "height", "50px", "viewBox", "0 0 100 100", "preserveAspectRatio", "xMidYMid", 2, "margin", "auto", "background", "none", "display", "block", "shape-rendering", "auto"], ["cx", "50", "cy", "50", "fill", "none", "stroke", "#ffffff", "stroke-width", "10", "r", "35", "stroke-dasharray", "164.93361431346415 56.97787143782138"], ["attributeName", "transform", "type", "rotate", "repeatCount", "indefinite", "dur", "1s", "values", "0 50 50;360 50 50", "keyTimes", "0;1"]], template: function AngularWeatherWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, AngularWeatherWidgetComponent_span_1_Template, 8, 9, "span", 1);
        ɵngcc0.ɵɵtemplate(2, AngularWeatherWidgetComponent_span_2_Template, 5, 0, "span", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction5(3, _c3, ctx.width, ctx.height, ctx.backgroundColor, ctx.isBoxShadow ? "0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)" : "none", ctx.borderRadius));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isLoading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isLoading);
    } }, directives: [ɵngcc2.NgStyle, ɵngcc2.NgIf], styles: ["p[_ngcontent-%COMP%]{padding:0;margin:0;word-break:break-all}.container[_ngcontent-%COMP%]{padding:20px;font-family:roboto}.container[_ngcontent-%COMP%]   .temp[_ngcontent-%COMP%]{display:flex;justify-content:space-between;white-space:nowrap}.container[_ngcontent-%COMP%]   .details[_ngcontent-%COMP%]{display:flex;margin-bottom:5px}.container[_ngcontent-%COMP%]   .details[_ngcontent-%COMP%]   .wind[_ngcontent-%COMP%]{padding-left:10px}"] });
/** @nocollapse */
AngularWeatherWidgetComponent.ctorParameters = () => [
    { type: AngularWeatherWidgetService }
];
AngularWeatherWidgetComponent.propDecorators = {
    APIKEY: [{ type: Input }],
    height: [{ type: Input }],
    width: [{ type: Input }],
    backgroundColor: [{ type: Input }],
    isBoxShadow: [{ type: Input }],
    borderRadius: [{ type: Input }],
    locationFontSize: [{ type: Input }],
    locationFontColor: [{ type: Input }],
    status: [{ type: Input }],
    statusFontColor: [{ type: Input }],
    statusFontSize: [{ type: Input }],
    temperature: [{ type: Input }],
    tempratureFontColor: [{ type: Input }],
    tempratureFontSize: [{ type: Input }],
    weatherImages: [{ type: Input }],
    weatherImageWidth: [{ type: Input }],
    weatherImageHeight: [{ type: Input }],
    geoLocation: [{ type: Input }],
    location: [{ type: Input }],
    isWind: [{ type: Input }],
    isHumidity: [{ type: Input }],
    windFontColor: [{ type: Input }],
    windFontSize: [{ type: Input }],
    humidityFontColor: [{ type: Input }],
    humidityFontSize: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularWeatherWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'angular-weather-widget',
                template: "<div class=\"container\"\r\n  [ngStyle]=\"{ 'width': width , 'height': height, 'background-color': backgroundColor, 'box-shadow': isBoxShadow ? '0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)' : 'none', 'border-radius': borderRadius }\">\r\n  <span *ngIf=\"!isLoading\">\r\n    <div class=\"location\">\r\n      <p [ngStyle]=\"{'font-size': locationFontSize, 'color': locationFontColor}\">{{weatherDetails?.location}}</p>\r\n    </div>\r\n    <div class=\"status\" *ngIf=\"status\">\r\n      <p [ngStyle]=\"{'color': statusFontColor, 'font-size': statusFontSize}\">{{weatherDetails?.weather_descriptions}}\r\n      </p>\r\n    </div>\r\n    <div class=\"temp\" *ngIf=\"temperature\">\r\n      <p [ngStyle]=\"{'color': tempratureFontColor, 'font-size': tempratureFontSize}\">{{weatherDetails?.temperature}}\u00B0 F\r\n      </p>\r\n      <div class=\"weather-images\" *ngIf=\"weatherImages\">\r\n        <img [ngStyle]=\"{'width': weatherImageWidth, 'height': weatherImageHeight }\" alt=\"weather-icon\"\r\n          src=\"{{weatherDetails?.icon}}\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"details\" *ngIf=\"isWind\">\r\n      <p [ngStyle]=\"{'color': windFontColor, 'font-size': windFontSize}\">Wind</p>\r\n      <p class=\"wind\" [ngStyle]=\"{'color': windFontColor, 'font-size': windFontSize}\">{{weatherDetails?.wind_speed}} MPH\r\n      </p>\r\n    </div>\r\n    <div class=\"details\" *ngIf=\"isHumidity\">\r\n      <p [ngStyle]=\"{'color': humidityFontColor, 'font-size': humidityFontSize}\">Humidity</p>\r\n      <p class=\"wind\" [ngStyle]=\"{'color': humidityFontColor, 'font-size': humidityFontSize}\">\r\n        {{weatherDetails?.humidity}} %</p>\r\n    </div>\r\n  </span>\r\n  <span *ngIf=\"isLoading\">\r\n    <div class=\"loading\">\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n        style=\"margin: auto; background: none; display: block; shape-rendering: auto;\" width=\"50px\" height=\"50px\"\r\n        viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\r\n        <circle cx=\"50\" cy=\"50\" fill=\"none\" stroke=\"#ffffff\" stroke-width=\"10\" r=\"35\"\r\n          stroke-dasharray=\"164.93361431346415 56.97787143782138\">\r\n          <animateTransform attributeName=\"transform\" type=\"rotate\" repeatCount=\"indefinite\" dur=\"1s\"\r\n            values=\"0 50 50;360 50 50\" keyTimes=\"0;1\"></animateTransform>\r\n        </circle>\r\n        <!-- [ldio] generated by https://loading.io/ -->\r\n      </svg>\r\n    </div>\r\n  </span>\r\n</div>\r\n",
                styles: ["p{padding:0;margin:0;word-break:break-all}.container{padding:20px;font-family:roboto}.container .temp{display:flex;justify-content:space-between;white-space:nowrap}.container .details{display:flex;margin-bottom:5px}.container .details .wind{padding-left:10px}"]
            }]
    }], function () { return [{ type: AngularWeatherWidgetService }]; }, { height: [{
            type: Input
        }], width: [{
            type: Input
        }], backgroundColor: [{
            type: Input
        }], isBoxShadow: [{
            type: Input
        }], borderRadius: [{
            type: Input
        }], locationFontSize: [{
            type: Input
        }], locationFontColor: [{
            type: Input
        }], status: [{
            type: Input
        }], statusFontColor: [{
            type: Input
        }], statusFontSize: [{
            type: Input
        }], temperature: [{
            type: Input
        }], tempratureFontColor: [{
            type: Input
        }], tempratureFontSize: [{
            type: Input
        }], weatherImages: [{
            type: Input
        }], weatherImageWidth: [{
            type: Input
        }], weatherImageHeight: [{
            type: Input
        }], geoLocation: [{
            type: Input
        }], location: [{
            type: Input
        }], isWind: [{
            type: Input
        }], isHumidity: [{
            type: Input
        }], windFontColor: [{
            type: Input
        }], windFontSize: [{
            type: Input
        }], humidityFontColor: [{
            type: Input
        }], humidityFontSize: [{
            type: Input
        }], APIKEY: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AngularWeatherWidgetModule {
}
AngularWeatherWidgetModule.ɵfac = function AngularWeatherWidgetModule_Factory(t) { return new (t || AngularWeatherWidgetModule)(); };
AngularWeatherWidgetModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularWeatherWidgetModule });
AngularWeatherWidgetModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [AngularWeatherWidgetService], imports: [[
            CommonModule,
            HttpClientModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AngularWeatherWidgetModule, { declarations: function () { return [AngularWeatherWidgetComponent]; }, imports: function () { return [CommonModule,
        HttpClientModule]; }, exports: function () { return [AngularWeatherWidgetComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularWeatherWidgetModule, [{
        type: NgModule,
        args: [{
                declarations: [AngularWeatherWidgetComponent],
                imports: [
                    CommonModule,
                    HttpClientModule
                ],
                exports: [AngularWeatherWidgetComponent],
                providers: [AngularWeatherWidgetService]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AngularWeatherWidgetService, AngularWeatherWidgetComponent, AngularWeatherWidgetModule };

//# sourceMappingURL=angular2-weather-widget.js.map