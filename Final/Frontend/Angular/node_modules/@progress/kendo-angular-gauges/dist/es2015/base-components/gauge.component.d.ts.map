{"version":3,"file":"gauge.component.d.ts","sources":["gauge.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { NgZone, ElementRef, Renderer2, SimpleChange, AfterViewChecked, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { ConfigurationService, ThemeService } from '../services';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { GaugeArea, Scale } from '../types';\nimport { ImageExportOptions, Group, SVGExportOptions } from '@progress/kendo-drawing';\nimport { ResizeSensorComponent } from '@progress/kendo-angular-common';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\n/**\n * @hidden\n */\nexport declare abstract class GaugeComponent implements AfterViewChecked, OnChanges, OnDestroy, OnInit {\n    protected configurationService: ConfigurationService;\n    protected themeService: ThemeService;\n    protected intlService: IntlService;\n    protected localizationService: LocalizationService;\n    protected element: ElementRef;\n    protected renderer: Renderer2;\n    protected ngZone: NgZone;\n    /**\n     * Specifies options for the Gauge area.\n     */\n    gaugeArea: GaugeArea;\n    /**\n     * Specifies the output type.\n     */\n    renderAs: 'canvas' | 'svg';\n    /**\n     * The maximum number of times the Gauge resizes per second.\n     * Defaults to `10`. To disable the automatic resizing, set `resizeRateLimit` to `0`.\n     */\n    resizeRateLimit: number;\n    /**\n     * Specifies the scale options.\n     */\n    scale: Scale;\n    /**\n     * Specifies if the changes will be animated.\n     */\n    transitions: boolean;\n    surfaceElement: ElementRef;\n    resizeSensor: ResizeSensorComponent;\n    className: boolean;\n    protected options: any;\n    protected theme: any;\n    protected instance: any;\n    protected subscriptions: any;\n    protected redrawTimeout: any;\n    protected rtl: boolean;\n    constructor(configurationService: ConfigurationService, themeService: ThemeService, intlService: IntlService, localizationService: LocalizationService, element: ElementRef, renderer: Renderer2, ngZone: NgZone);\n    ngOnInit(): void;\n    ngAfterViewChecked(): void;\n    protected updateCall(updateMethod: any): void;\n    protected updateOptions(): void;\n    protected setValues(): void;\n    ngOnChanges(changes: {\n        [propertyName: string]: SimpleChange;\n    }): void;\n    ngOnDestroy(): void;\n    /**\n     * Exports the Gauge as an image. The export operation is asynchronous and returns a promise.\n     *\n     * @param {ImageExportOptions} options - The parameters for the exported image.\n     * @returns {Promise<string>} - A promise that will be resolved with a PNG image that is encoded as a Data URI.\n     */\n    exportImage(options?: ImageExportOptions): Promise<string>;\n    /**\n     * Exports the Gauge as an SVG document. The export operation is asynchronous and returns a promise.\n     *\n     * @param {SVGExportOptions} options - The parameters for the exported file.\n     * @returns {Promise<string>} - A promise that will be resolved with an SVG document that is encoded as a Data URI.\n     */\n    exportSVG(options?: SVGExportOptions): Promise<string>;\n    /**\n     * Exports the Gauge as a Drawing `Scene`.\n     *\n     * @returns {Promise<Group>} - A promise that will be resolved with the export visual.\n     */\n    exportVisual(): Promise<Group>;\n    /**\n     * @hidden\n     */\n    onResize(_event?: any): void;\n    /**\n     * Detects the size of the container and redraws the Gauge.\n     * Resizing is automatic unless you set the `resizeRateLimit` option to `0`.\n     */\n    resize(): void;\n    protected abstract createInstance(element: any, options: any, theme: any, context: any): void;\n    protected init(): void;\n    protected readonly autoResize: boolean;\n    protected updateSize(): void;\n    protected intlChange(): void;\n    protected rtlChange(): void;\n    protected deferredRedraw(): void;\n    protected defer(callback: any): void;\n    protected updateDirection(): void;\n    protected setDirection(): void;\n    protected readonly isRTL: boolean;\n}\n"]}