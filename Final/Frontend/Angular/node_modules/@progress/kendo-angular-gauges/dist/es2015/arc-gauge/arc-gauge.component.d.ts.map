{"version":3,"file":"arc-gauge.component.d.ts","sources":["arc-gauge.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { NgZone, ElementRef, Renderer2, ChangeDetectorRef } from '@angular/core';\nimport { ConfigurationService, ThemeService } from '../services';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { ArcScale, ColorRange } from '../types';\nimport { GaugeComponent } from '../base-components';\nimport { ArcCenterTemplateDirective } from './arc-center-template.directive';\nimport { Group } from '@progress/kendo-drawing';\n/**\n * Represents the [Kendo UI ArcGauge component for Angular]({% slug overview_arcgauge_gauges %}).\n *\n * @example\n * ```ts\n * import { Component } from '@angular/core';\n *\n * _@Component({\n *   selector: 'my-app',\n *   template: `\n *      <kendo-arcgauge [value]=\"value\" [scale]=\"{ max: 100 }\">\n *          <ng-template kendoArcGaugeCenterTemplate let-value=\"value\">\n *              {{ value }}%\n *          </ng-template>\n *      </kendo-arcgauge>\n *   `\n * })\n * class AppComponent {\n *   public value: number = 10;\n * }\n *\n * ```\n */\nexport declare class ArcGaugeComponent extends GaugeComponent {\n    protected changeDetector: ChangeDetectorRef;\n    /**\n     * The value of the ArcGauge.\n     */\n    value: number;\n    /**\n     * The color of the value pointer. Accepts a valid CSS color string, including hex and rgb.\n     */\n    color: string;\n    /**\n     * The color ranges of the value pointer.\n     */\n    colors: ColorRange[];\n    /**\n     * The opacity of the value pointer.\n     */\n    opacity: number;\n    /**\n     * The scale options of the ArcGauge.\n     */\n    scale: ArcScale;\n    centerTemplate: ArcCenterTemplateDirective;\n    labelElement: ElementRef;\n    className: boolean;\n    centerTemplateContext: any;\n    constructor(changeDetector: ChangeDetectorRef, configurationService: ConfigurationService, themeService: ThemeService, intlService: IntlService, localizationService: LocalizationService, element: ElementRef, renderer: Renderer2, ngZone: NgZone);\n    ngOnInit(): void;\n    ngAfterViewChecked(): void;\n    /**\n     * Exports the ArcGauge as a Drawing `Scene`.\n     *\n     * @returns {Promise<Group>} - A promise that will be resolved with the export visual.\n     */\n    exportVisual(): Promise<Group>;\n    /**\n     * Detects the size of the container and redraws the Gauge.\n     * Resizing is automatic unless you set the `resizeRateLimit` option to `0`.\n     */\n    resize(): void;\n    protected createInstance(element: any, options: any, theme: any, context: any): void;\n    protected updateOptions(): void;\n    protected setValues(): void;\n    protected updateElements(): void;\n    protected updateCenterTemplate(): void;\n    protected positionLabel(): void;\n    protected updateSize(): void;\n}\n"]}