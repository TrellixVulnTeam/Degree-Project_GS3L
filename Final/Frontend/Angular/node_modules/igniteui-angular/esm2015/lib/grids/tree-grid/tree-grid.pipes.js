import { Pipe } from '@angular/core';
import { cloneArray, cloneHierarchicalArray } from '../../core/utils';
import { DataUtil } from '../../data-operations/data-util';
import { GridBaseAPIService } from '../api.service';
import { GridPagingMode } from '../common/enums';
/**
 * @hidden
 */
export class IgxTreeGridHierarchizingPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, primaryKey, foreignKey, childDataKey, id, pipeTrigger) {
        const grid = this.gridAPI.grid;
        let hierarchicalRecords = [];
        const treeGridRecordsMap = new Map();
        const flatData = [];
        if (primaryKey && foreignKey) {
            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap, flatData);
        }
        else if (childDataKey) {
            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined, flatData, 0, treeGridRecordsMap);
        }
        grid.flatData = grid.transactions.enabled ?
            flatData.filter(rec => !grid.transactions.getState(this.getRowID(primaryKey, rec))) : flatData;
        grid.records = treeGridRecordsMap;
        grid.rootRecords = hierarchicalRecords;
        return hierarchicalRecords;
    }
    getRowID(primaryKey, rowData) {
        return primaryKey ? rowData[primaryKey] : rowData;
    }
    hierarchizeFlatData(id, collection, primaryKey, foreignKey, map, flatData) {
        const result = [];
        const missingParentRecords = [];
        collection.forEach(row => {
            const record = {
                rowID: this.getRowID(primaryKey, row),
                data: row,
                children: []
            };
            const parent = map.get(row[foreignKey]);
            if (parent) {
                record.parent = parent;
                parent.children.push(record);
            }
            else {
                missingParentRecords.push(record);
            }
            map.set(row[primaryKey], record);
        });
        missingParentRecords.forEach(record => {
            const parent = map.get(record.data[foreignKey]);
            if (parent) {
                record.parent = parent;
                parent.children.push(record);
            }
            else {
                result.push(record);
            }
        });
        this.setIndentationLevels(id, result, 0, flatData);
        return result;
    }
    setIndentationLevels(id, collection, indentationLevel, flatData) {
        for (const record of collection) {
            record.level = indentationLevel;
            record.expanded = this.gridAPI.get_row_expansion_state(record);
            flatData.push(record.data);
            if (record.children && record.children.length > 0) {
                this.setIndentationLevels(id, record.children, indentationLevel + 1, flatData);
            }
        }
    }
    hierarchizeRecursive(id, collection, primaryKey, childDataKey, parent, flatData, indentationLevel, map) {
        const result = [];
        for (const item of collection) {
            const record = {
                rowID: this.getRowID(primaryKey, item),
                data: item,
                parent,
                level: indentationLevel
            };
            record.expanded = this.gridAPI.get_row_expansion_state(record);
            flatData.push(item);
            map.set(record.rowID, record);
            record.children = item[childDataKey] ?
                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :
                undefined;
            result.push(record);
        }
        return result;
    }
}
IgxTreeGridHierarchizingPipe.decorators = [
    { type: Pipe, args: [{
                name: 'treeGridHierarchizing',
                pure: true
            },] }
];
IgxTreeGridHierarchizingPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
/**
 * @hidden
 */
export class IgxTreeGridFlatteningPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, id, expandedLevels, expandedStates, pipeTrigger) {
        const grid = this.gridAPI.grid;
        const data = [];
        grid.processedRootRecords = collection;
        grid.processedRecords = new Map();
        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);
        grid.processedExpandedFlatData = data.map(r => r.data);
        return data;
    }
    getFlatDataRecursive(collection, data, expandedLevels, expandedStates, gridID, parentExpanded) {
        if (!collection || !collection.length) {
            return;
        }
        const grid = this.gridAPI.grid;
        for (const hierarchicalRecord of collection) {
            if (parentExpanded) {
                data.push(hierarchicalRecord);
            }
            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(hierarchicalRecord);
            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);
            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);
            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels, expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);
        }
    }
    updateNonProcessedRecordExpansion(grid, record) {
        const rec = grid.records.get(record.rowID);
        rec.expanded = record.expanded;
    }
}
IgxTreeGridFlatteningPipe.decorators = [
    { type: Pipe, args: [{
                name: 'treeGridFlattening',
                pure: true
            },] }
];
IgxTreeGridFlatteningPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
/** @hidden */
export class IgxTreeGridSortingPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(hierarchicalData, expressions, sorting, id, pipeTrigger, pinned) {
        const grid = this.gridAPI.grid;
        let result;
        if (!expressions.length) {
            result = hierarchicalData;
        }
        else {
            result = DataUtil.treeGridSort(hierarchicalData, expressions, sorting, null, grid);
        }
        const filteredSortedData = [];
        this.flattenTreeGridRecords(result, filteredSortedData);
        grid.setFilteredSortedData(filteredSortedData, pinned);
        return result;
    }
    flattenTreeGridRecords(records, flatData) {
        if (records && records.length) {
            for (const record of records) {
                flatData.push(record.data);
                this.flattenTreeGridRecords(record.children, flatData);
            }
        }
    }
}
IgxTreeGridSortingPipe.decorators = [
    { type: Pipe, args: [{
                name: 'treeGridSorting',
                pure: true
            },] }
];
IgxTreeGridSortingPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
/** @hidden */
export class IgxTreeGridPagingPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, page = 0, perPage = 15, id, pipeTrigger) {
        const grid = this.gridAPI.grid;
        if (!grid.paging || grid.pagingMode !== GridPagingMode.Local) {
            return collection;
        }
        const len = grid._totalRecords >= 0 ? grid._totalRecords : collection.length;
        const totalPages = Math.ceil(len / perPage);
        const state = {
            index: (totalPages > 0 && page >= totalPages) ? totalPages - 1 : page,
            recordsPerPage: perPage
        };
        const result = DataUtil.page(cloneArray(collection), state, len);
        grid.pagingState = state;
        grid._page = state.index;
        return result;
    }
}
IgxTreeGridPagingPipe.decorators = [
    { type: Pipe, args: [{
                name: 'treeGridPaging',
                pure: true
            },] }
];
IgxTreeGridPagingPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
/** @hidden */
export class IgxTreeGridTransactionPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, id, pipeTrigger) {
        const grid = this.gridAPI.grid;
        if (grid.transactions.enabled) {
            const aggregatedChanges = grid.transactions.getAggregatedChanges(true);
            if (aggregatedChanges.length > 0) {
                const primaryKey = grid.primaryKey;
                if (!primaryKey) {
                    return collection;
                }
                const foreignKey = grid.foreignKey;
                const childDataKey = grid.childDataKey;
                if (foreignKey) {
                    const flatDataClone = cloneArray(collection);
                    return DataUtil.mergeTransactions(flatDataClone, aggregatedChanges, grid.primaryKey);
                }
                else if (childDataKey) {
                    const hierarchicalDataClone = cloneHierarchicalArray(collection, childDataKey);
                    return DataUtil.mergeHierarchicalTransactions(hierarchicalDataClone, aggregatedChanges, childDataKey, grid.primaryKey);
                }
            }
        }
        return collection;
    }
}
IgxTreeGridTransactionPipe.decorators = [
    { type: Pipe, args: [{
                name: 'treeGridTransaction',
                pure: true
            },] }
];
IgxTreeGridTransactionPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
/**
 * This pipe maps the original record to ITreeGridRecord format used in TreeGrid.
 */
export class IgxTreeGridNormalizeRecordsPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, pipeTrigger) {
        const grid = this.gridAPI.grid;
        const primaryKey = grid.primaryKey;
        // using flattened data because origin data may be hierarchical.
        const flatData = grid.flatData;
        const res = flatData.map(rec => ({
            rowID: grid.primaryKey ? rec[primaryKey] : rec,
            data: rec,
            level: 0,
            children: []
        }));
        return res;
    }
}
IgxTreeGridNormalizeRecordsPipe.decorators = [
    { type: Pipe, args: [{
                name: 'treeGridNormalizeRecord',
                pure: true
            },] }
];
IgxTreeGridNormalizeRecordsPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
//# sourceMappingURL=data:application/json;base64,