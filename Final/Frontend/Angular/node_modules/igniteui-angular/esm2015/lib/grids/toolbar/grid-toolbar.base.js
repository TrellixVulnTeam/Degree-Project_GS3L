import { Directive, Host, Input } from '@angular/core';
import { first } from 'rxjs/operators';
import { AbsoluteScrollStrategy, ConnectedPositioningStrategy, HorizontalAlignment, VerticalAlignment } from '../../services/public_api';
import { IgxGridToolbarComponent } from './grid-toolbar.component';
/**
 * Base class for the pinning/hiding column actions.
 *
 * @hidden @internal
 */
export class BaseToolbarDirective {
    constructor(toolbar) {
        this.toolbar = toolbar;
    }
    /**
     * Returns the grid containing this component.
     */
    get grid() {
        return this.toolbar.grid;
    }
    /** @hidden @internal */
    toggle(anchorElement, toggleRef, actions) {
        if (actions) {
            const setHeight = () => { var _a; return actions.columnsAreaMaxHeight = (_a = this.columnListHeight) !== null && _a !== void 0 ? _a : `${Math.max(this.grid.calcHeight, 200)}px`; };
            toggleRef.onOpening.pipe(first()).subscribe(setHeight);
        }
        toggleRef.toggle(Object.assign(Object.assign({}, _makeOverlaySettings()), { target: anchorElement, outlet: this.grid.outlet,
            excludeFromOutsideClick: [anchorElement] }));
    }
    /** @hidden @internal */
    focusSearch(columnActions) {
        var _a;
        (_a = columnActions.querySelector('input')) === null || _a === void 0 ? void 0 : _a.focus();
    }
}
BaseToolbarDirective.decorators = [
    { type: Directive }
];
BaseToolbarDirective.ctorParameters = () => [
    { type: IgxGridToolbarComponent, decorators: [{ type: Host }] }
];
BaseToolbarDirective.propDecorators = {
    columnListHeight: [{ type: Input }],
    title: [{ type: Input }],
    prompt: [{ type: Input }]
};
const _makeOverlaySettings = () => {
    const positionSettings = {
        horizontalDirection: HorizontalAlignment.Left,
        horizontalStartPoint: HorizontalAlignment.Right,
        verticalDirection: VerticalAlignment.Bottom,
        verticalStartPoint: VerticalAlignment.Bottom
    };
    return {
        positionStrategy: new ConnectedPositioningStrategy(positionSettings),
        scrollStrategy: new AbsoluteScrollStrategy(),
        modal: false,
        closeOnEscape: true,
        closeOnOutsideClick: true
    };
};
const ɵ0 = _makeOverlaySettings;
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC10b29sYmFyLmJhc2UuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvIiwic291cmNlcyI6WyJsaWIvZ3JpZHMvdG9vbGJhci9ncmlkLXRvb2xiYXIuYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXZDLE9BQU8sRUFDSCxzQkFBc0IsRUFDdEIsNEJBQTRCLEVBQzVCLG1CQUFtQixFQUduQixpQkFBaUIsRUFDcEIsTUFBTSwyQkFBMkIsQ0FBQztBQUVuQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUduRTs7OztHQUlHO0FBRUgsTUFBTSxPQUFnQixvQkFBb0I7SUEyQnRDLFlBQThCLE9BQWdDO1FBQWhDLFlBQU8sR0FBUCxPQUFPLENBQXlCO0lBQUksQ0FBQztJQVBuRTs7T0FFRztJQUNILElBQVcsSUFBSTtRQUNYLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUlELHdCQUF3QjtJQUNqQixNQUFNLENBQUMsYUFBMEIsRUFBRSxTQUE2QixFQUFFLE9BQW1DO1FBQ3hHLElBQUksT0FBTyxFQUFFO1lBQ1QsTUFBTSxTQUFTLEdBQUcsR0FBRyxFQUFFLFdBQUMsT0FBQSxPQUFPLENBQUMsb0JBQW9CLFNBQUcsSUFBSSxDQUFDLGdCQUFnQixtQ0FBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQSxFQUFBLENBQUM7WUFDM0gsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDMUQ7UUFDRCxTQUFTLENBQUMsTUFBTSxpQ0FBTSxvQkFBb0IsRUFBRSxHQUFLLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNO1lBQzlGLHVCQUF1QixFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQ3JELENBQUM7SUFFRCx3QkFBd0I7SUFDakIsV0FBVyxDQUFDLGFBQTBCOztRQUN6QyxNQUFBLGFBQWEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLDBDQUFFLEtBQUssR0FBRztJQUNsRCxDQUFDOzs7WUEzQ0osU0FBUzs7O1lBUkQsdUJBQXVCLHVCQW9DZixJQUFJOzs7K0JBdEJoQixLQUFLO29CQU1MLEtBQUs7cUJBTUwsS0FBSzs7QUE2QlYsTUFBTSxvQkFBb0IsR0FBRyxHQUFvQixFQUFFO0lBQy9DLE1BQU0sZ0JBQWdCLEdBQXFCO1FBQ3ZDLG1CQUFtQixFQUFFLG1CQUFtQixDQUFDLElBQUk7UUFDN0Msb0JBQW9CLEVBQUUsbUJBQW1CLENBQUMsS0FBSztRQUMvQyxpQkFBaUIsRUFBRSxpQkFBaUIsQ0FBQyxNQUFNO1FBQzNDLGtCQUFrQixFQUFFLGlCQUFpQixDQUFDLE1BQU07S0FDL0MsQ0FBQztJQUNGLE9BQU87UUFDSCxnQkFBZ0IsRUFBRSxJQUFJLDRCQUE0QixDQUFDLGdCQUFnQixDQUFDO1FBQ3BFLGNBQWMsRUFBRSxJQUFJLHNCQUFzQixFQUFFO1FBQzVDLEtBQUssRUFBRSxLQUFLO1FBQ1osYUFBYSxFQUFFLElBQUk7UUFDbkIsbUJBQW1CLEVBQUUsSUFBSTtLQUM1QixDQUFDO0FBQ04sQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZmlyc3QgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJZ3hUb2dnbGVEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL3RvZ2dsZS90b2dnbGUuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gICAgQWJzb2x1dGVTY3JvbGxTdHJhdGVneSxcbiAgICBDb25uZWN0ZWRQb3NpdGlvbmluZ1N0cmF0ZWd5LFxuICAgIEhvcml6b250YWxBbGlnbm1lbnQsXG4gICAgT3ZlcmxheVNldHRpbmdzLFxuICAgIFBvc2l0aW9uU2V0dGluZ3MsXG4gICAgVmVydGljYWxBbGlnbm1lbnRcbn0gZnJvbSAnLi4vLi4vc2VydmljZXMvcHVibGljX2FwaSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5BY3Rpb25zQ29tcG9uZW50IH0gZnJvbSAnLi4vY29sdW1uLWFjdGlvbnMvY29sdW1uLWFjdGlvbnMuY29tcG9uZW50JztcbmltcG9ydCB7IElneEdyaWRUb29sYmFyQ29tcG9uZW50IH0gZnJvbSAnLi9ncmlkLXRvb2xiYXIuY29tcG9uZW50JztcblxuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIHRoZSBwaW5uaW5nL2hpZGluZyBjb2x1bW4gYWN0aW9ucy5cbiAqXG4gKiBAaGlkZGVuIEBpbnRlcm5hbFxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlVG9vbGJhckRpcmVjdGl2ZSB7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoZWlnaHQgb2YgdGhlIGNvbHVtbiBsaXN0IGluIHRoZSBkcm9wZG93bi5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBjb2x1bW5MaXN0SGVpZ2h0OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaXRsZSB0ZXh0IGZvciB0aGUgY29sdW1uIGFjdGlvbiBjb21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyB0aXRsZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBsYWNlaG9sZGVyIHRleHQgZm9yIHRoZSBzZWFyY2ggaW5wdXQuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgcHJvbXB0OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBncmlkIGNvbnRhaW5pbmcgdGhpcyBjb21wb25lbnQuXG4gICAgICovXG4gICAgcHVibGljIGdldCBncmlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b29sYmFyLmdyaWQ7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoQEhvc3QoKSBwcm90ZWN0ZWQgdG9vbGJhcjogSWd4R3JpZFRvb2xiYXJDb21wb25lbnQpIHsgfVxuXG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHVibGljIHRvZ2dsZShhbmNob3JFbGVtZW50OiBIVE1MRWxlbWVudCwgdG9nZ2xlUmVmOiBJZ3hUb2dnbGVEaXJlY3RpdmUsIGFjdGlvbnM/OiBJZ3hDb2x1bW5BY3Rpb25zQ29tcG9uZW50KTogdm9pZCB7XG4gICAgICAgIGlmIChhY3Rpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBzZXRIZWlnaHQgPSAoKSA9PiBhY3Rpb25zLmNvbHVtbnNBcmVhTWF4SGVpZ2h0ID0gdGhpcy5jb2x1bW5MaXN0SGVpZ2h0ID8/IGAke01hdGgubWF4KHRoaXMuZ3JpZC5jYWxjSGVpZ2h0LCAyMDApfXB4YDtcbiAgICAgICAgICAgIHRvZ2dsZVJlZi5vbk9wZW5pbmcucGlwZShmaXJzdCgpKS5zdWJzY3JpYmUoc2V0SGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICB0b2dnbGVSZWYudG9nZ2xlKHsgLi4uX21ha2VPdmVybGF5U2V0dGluZ3MoKSwgLi4ueyB0YXJnZXQ6IGFuY2hvckVsZW1lbnQsIG91dGxldDogdGhpcy5ncmlkLm91dGxldCxcbiAgICAgICAgICAgIGV4Y2x1ZGVGcm9tT3V0c2lkZUNsaWNrOiBbYW5jaG9yRWxlbWVudF0gfX0pO1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHB1YmxpYyBmb2N1c1NlYXJjaChjb2x1bW5BY3Rpb25zOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBjb2x1bW5BY3Rpb25zLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk/LmZvY3VzKCk7XG4gICAgfVxufVxuXG5cbmNvbnN0IF9tYWtlT3ZlcmxheVNldHRpbmdzID0gKCk6IE92ZXJsYXlTZXR0aW5ncyA9PiB7XG4gICAgY29uc3QgcG9zaXRpb25TZXR0aW5nczogUG9zaXRpb25TZXR0aW5ncyA9IHtcbiAgICAgICAgaG9yaXpvbnRhbERpcmVjdGlvbjogSG9yaXpvbnRhbEFsaWdubWVudC5MZWZ0LFxuICAgICAgICBob3Jpem9udGFsU3RhcnRQb2ludDogSG9yaXpvbnRhbEFsaWdubWVudC5SaWdodCxcbiAgICAgICAgdmVydGljYWxEaXJlY3Rpb246IFZlcnRpY2FsQWxpZ25tZW50LkJvdHRvbSxcbiAgICAgICAgdmVydGljYWxTdGFydFBvaW50OiBWZXJ0aWNhbEFsaWdubWVudC5Cb3R0b21cbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHBvc2l0aW9uU3RyYXRlZ3k6IG5ldyBDb25uZWN0ZWRQb3NpdGlvbmluZ1N0cmF0ZWd5KHBvc2l0aW9uU2V0dGluZ3MpLFxuICAgICAgICBzY3JvbGxTdHJhdGVneTogbmV3IEFic29sdXRlU2Nyb2xsU3RyYXRlZ3koKSxcbiAgICAgICAgbW9kYWw6IGZhbHNlLFxuICAgICAgICBjbG9zZU9uRXNjYXBlOiB0cnVlLFxuICAgICAgICBjbG9zZU9uT3V0c2lkZUNsaWNrOiB0cnVlXG4gICAgfTtcbn07XG4iXX0=