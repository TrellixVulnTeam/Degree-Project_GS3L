import { IgxGridActionButtonComponent } from './grid-action-button.component';
import { Directive, Input, ViewChildren, IterableDiffers } from '@angular/core';
import { IgxRowDirective } from '../../grids/row.directive';
import { IgxIconService } from '../../icon/icon.service';
export class IgxGridActionsBaseDirective {
    constructor(iconService, differs) {
        this.iconService = iconService;
        this.differs = differs;
        /**
         * Gets/Sets if the action buttons will be rendered as menu items. When in menu, items will be rendered with text label.
         *
         * @example
         * ```html
         *  <igx-grid-pinning-actions [asMenuItems]='true'></igx-grid-pinning-actions>
         *  <igx-grid-editing-actions [asMenuItems]='true'></igx-grid-editing-actions>
         * ```
         */
        this.asMenuItems = false;
    }
    /**
     * @hidden
     * @internal
     */
    get grid() {
        return this.strip.context.grid;
    }
    /**
     * Getter to be used in template
     *
     * @hidden
     * @internal
     */
    get isRowContext() {
        return this.isRow(this.strip.context) && !this.strip.context.inEditMode;
    }
    /**
     * @hidden
     * @internal
     */
    ngAfterViewInit() {
        if (this.asMenuItems) {
            this.buttons.changes.subscribe((change) => {
                this.strip.cdr.detectChanges();
            });
        }
    }
    /**
     * Check if the param is a row from a grid
     *
     * @hidden
     * @internal
     * @param context
     */
    isRow(context) {
        return context && context instanceof IgxRowDirective;
    }
}
IgxGridActionsBaseDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxGridActionsBase]'
            },] }
];
IgxGridActionsBaseDirective.ctorParameters = () => [
    { type: IgxIconService },
    { type: IterableDiffers }
];
IgxGridActionsBaseDirective.propDecorators = {
    buttons: [{ type: ViewChildren, args: [IgxGridActionButtonComponent,] }],
    asMenuItems: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1hY3Rpb25zLWJhc2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjLyIsInNvdXJjZXMiOlsibGliL2FjdGlvbi1zdHJpcC9ncmlkLWFjdGlvbnMvZ3JpZC1hY3Rpb25zLWJhc2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUE0QixZQUFZLEVBQUUsZUFBZSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFHLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFLekQsTUFBTSxPQUFPLDJCQUEyQjtJQW9DcEMsWUFBc0IsV0FBMkIsRUFDM0IsT0FBd0I7UUFEeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWdCO1FBQzNCLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBakM5Qzs7Ozs7Ozs7V0FRRztRQUVILGdCQUFXLEdBQUcsS0FBSyxDQUFDO0lBdUI4QixDQUFDO0lBbkJuRDs7O09BR0c7SUFDSCxJQUFJLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztJQUNuQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxJQUFJLFlBQVk7UUFDWixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUM1RSxDQUFDO0lBS0Q7OztPQUdHO0lBQ0gsZUFBZTtRQUNYLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQStDLEVBQUUsRUFBRTtnQkFDM0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDdkMsQ0FBQyxDQUFDLENBQUM7U0FDVjtJQUNMLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDTyxLQUFLLENBQUMsT0FBTztRQUNuQixPQUFPLE9BQU8sSUFBSSxPQUFPLFlBQVksZUFBZSxDQUFDO0lBQ3pELENBQUM7OztZQS9ESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHNCQUFzQjthQUNuQzs7O1lBSlEsY0FBYztZQUg0QyxlQUFlOzs7c0JBUzdFLFlBQVksU0FBQyw0QkFBNEI7MEJBWXpDLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJZ3hHcmlkQWN0aW9uQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi9ncmlkLWFjdGlvbi1idXR0b24uY29tcG9uZW50JztcbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEFmdGVyVmlld0luaXQsIFF1ZXJ5TGlzdCwgVmlld0NoaWxkcmVuLCBJdGVyYWJsZURpZmZlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneEFjdGlvblN0cmlwQ29tcG9uZW50IH0gZnJvbSAnLi4vYWN0aW9uLXN0cmlwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hSb3dEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9ncmlkcy9yb3cuZGlyZWN0aXZlJztcbmltcG9ydCB7IElneEljb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vaWNvbi9pY29uLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hHcmlkQWN0aW9uc0Jhc2VdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hHcmlkQWN0aW9uc0Jhc2VEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICBAVmlld0NoaWxkcmVuKElneEdyaWRBY3Rpb25CdXR0b25Db21wb25lbnQpXG4gICAgcHVibGljIGJ1dHRvbnM6IFF1ZXJ5TGlzdDxJZ3hHcmlkQWN0aW9uQnV0dG9uQ29tcG9uZW50PjtcblxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyBpZiB0aGUgYWN0aW9uIGJ1dHRvbnMgd2lsbCBiZSByZW5kZXJlZCBhcyBtZW51IGl0ZW1zLiBXaGVuIGluIG1lbnUsIGl0ZW1zIHdpbGwgYmUgcmVuZGVyZWQgd2l0aCB0ZXh0IGxhYmVsLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogIDxpZ3gtZ3JpZC1waW5uaW5nLWFjdGlvbnMgW2FzTWVudUl0ZW1zXT0ndHJ1ZSc+PC9pZ3gtZ3JpZC1waW5uaW5nLWFjdGlvbnM+XG4gICAgICogIDxpZ3gtZ3JpZC1lZGl0aW5nLWFjdGlvbnMgW2FzTWVudUl0ZW1zXT0ndHJ1ZSc+PC9pZ3gtZ3JpZC1lZGl0aW5nLWFjdGlvbnM+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBhc01lbnVJdGVtcyA9IGZhbHNlO1xuXG4gICAgcHVibGljIHN0cmlwOiBJZ3hBY3Rpb25TdHJpcENvbXBvbmVudDtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBnZXQgZ3JpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaXAuY29udGV4dC5ncmlkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHRlciB0byBiZSB1c2VkIGluIHRlbXBsYXRlXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZ2V0IGlzUm93Q29udGV4dCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNSb3codGhpcy5zdHJpcC5jb250ZXh0KSAmJiAhdGhpcy5zdHJpcC5jb250ZXh0LmluRWRpdE1vZGU7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGljb25TZXJ2aWNlOiBJZ3hJY29uU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgZGlmZmVyczogSXRlcmFibGVEaWZmZXJzKSB7IH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmFzTWVudUl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5idXR0b25zLmNoYW5nZXMuc3Vic2NyaWJlKChjaGFuZ2U6IFF1ZXJ5TGlzdDxJZ3hHcmlkQWN0aW9uQnV0dG9uQ29tcG9uZW50PikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJpcC5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIHBhcmFtIGlzIGEgcm93IGZyb20gYSBncmlkXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICogQHBhcmFtIGNvbnRleHRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgaXNSb3coY29udGV4dCk6IGNvbnRleHQgaXMgSWd4Um93RGlyZWN0aXZlPGFueT4ge1xuICAgICAgICByZXR1cm4gY29udGV4dCAmJiBjb250ZXh0IGluc3RhbmNlb2YgSWd4Um93RGlyZWN0aXZlO1xuICAgIH1cbn1cbiJdfQ==