{"version":3,"sources":["webpack:///src/app/shared/rest-api.service.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/environments/environment.ts","webpack:///src/app/wallet/wallet.component.ts","webpack:///src/app/wallet/wallet.component.html","webpack:///src/app/services/api.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/profile/profile.component.ts","webpack:///src/app/profile/profile.component.html","webpack:///src/app/services/firebase.service.ts","webpack:///src/app/app.module.ts","webpack:///src/app/market/market.component.ts","webpack:///src/app/market/market.component.html","webpack:///src/app/history/history.component.ts","webpack:///src/app/history/history.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["RestApiService","http","serverURL","weatherURLV5","v5URL","v4URL","testPost","author","buyer","seller","quantity","testBid","uid","Post_Id","Amount","testProd","testUid","httpOptions","headers","get","pipe","handleError","post","object","toPromise","then","data","console","log","value","bid","error","errorMessage","ErrorEvent","message","status","window","alert","providedIn","HomeComponent","firebaseService","api","firestore","auth","isDarkTheme","Home","Profile","Wallet","History","Market","isLogout","Users","collection","valueChanges","authState","subscribe","user","currentUser","logout","emit","showHome","showProfile","showWallet","showHistory","showMarket","selector","templateUrl","styleUrls","providers","environment","production","firebase","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","WalletComponent","ApiService","baseurl","httpHeaders","AppComponent","title","isSignedIn","localStorage","getItem","email","password","signin","isLoggedIn","Name","ProfileComponent","Data","dbRef","template","FirebaseService","firebaseAuth","signInWithEmailAndPassword","res","setItem","JSON","stringify","createUserWithEmailAndPassword","signOut","removeItem","snapshotChanges","AppModule","initializeApp","declarations","imports","bootstrap","MarketComponent","restApi","overlayContainer","_snackBar","Chain","displayedColumns","Production","Consumption","Surplus","parser","DOMParser","testval","today","Date","now","myDate","ProductionArraySum","testBuy","name","durationInSeconds","doc","itemCollection","items","action","open","duration","walletValue","item","add","port","node_address","connectToChain","dataSource","getPostings","postings","map","e","user_name","payload","id","Energy","postID","bidValue","openSnackBar","tempPostID","toString","postBid","getChain","push","markoUpdate","set","shaunUpdate","yashUpdate","yassineUpdate","setDate","getDate","randDocId","Math","floor","random","userUpdate","Owner","PostID","Time","sum","temp","i","postProduction","calcSumProductionArray","postConsumption","postSurplus","warn","addPosting","addUserPosting","loadChain","connectToNetwork","cleanProdArray","HistoryComponent","routes","path","component","AppRoutingModule","forRoot","exports","bootstrapModule","err","webpackEmptyAsyncContext","req","Promise","resolve","Error","code","keys","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Chain } from '../shared/chain';\nimport { Production } from '../shared/production';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\nexport interface transaction {\n  author: String;\n  buyer:  String;\n  seller: String;\n  quantity: number;\n}\n\nexport interface bid {\n  uid:  String;\n  Post_Id: String;\n  Amount: number;\n}\n\nexport interface port {\n  node_address: String;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestApiService {\n  \n  //Define API urls\n  serverURL = 'http://localhost:8003';\n  weatherURLV5 = 'http://localhost:8004';\n  v5URL = 'http://localhost:8003';\n  v4URL = 'http://localhost:8000';\n\n  //Hardcodded testing data\n  testPost = {\n    author: \"Marko\",\n    buyer:  \"Marko\",\n    seller: \"Yash\",\n    quantity: \"420\",\n  }\n\n  testBid = {\n    uid:  \"NOtcKxDvogdK9JbDTacpUbb1EiC2\",\n    Post_Id: \"444\",\n    Amount: 15,\n  }\n\n  //this format works for json posts\n  testProd = {\n    author: \"NOtcKxDvogdK9JbDTacpUbb1EiC2\",\n  }\n\n  testUid = {\n    author: \"NOtcKxDvogdK9JbDTacpUbb1EiC2\",\n  }\n\n  constructor(private http: HttpClient) { }\n\n  /*========================================\n    CRUD Methods for consuming RESTful API\n  =========================================*/\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    })\n  }\n\n  \n    // HttpClient API get() method => Fetch chain data\n    getChain(): Observable<Chain> {\n      return this.http.get<Chain>(this.serverURL + '/chain')\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n    }\n\n    //Sends userID to production server\n    postProduction(){\n      //we pass this a premade object from above\n      return this.http.post(this.weatherURLV5 + '/solar_production', this.testProd)\n      //TODO\n      //Returns or displays 2 production datas\n    }\n\n    //Posts dummy data to the chain\n    postChain(object: transaction): any {\n      this.http.post<Chain>(this.serverURL + '/new_transaction', object)\n      .toPromise()\n      .then(data => {\n        console.log(data);\n      })\n    }\n\n    //Connect to other networks\n    connectToChain(value: port): any {\n      this.http.post(this.v5URL + '/register_with', value)\n      .toPromise()\n      .then(data => {\n        console.log(data);\n      })\n    }\n    \n    //get the Consumption from the weather server\n    ///THIS IS BIDDDDDDDD\n    postConsumption(){\n      return this.http.post(this.weatherURLV5 + '/solar_consumption', this.testProd)\n    }\n\n    postBid(bid: bid){\n      return this.http.post(this.weatherURLV5 + '/validate_bid', bid)\n    }\n\n    //get the surplus from the server from the weather server\n    postSurplus(){\n      return this.http.post(this.weatherURLV5 + '/surplus', this.testUid)\n    }\n\n    //get the surplus from the server from the weather server\n    // postBid(){\n      \n    //   let bid = {\n    //     uid:  \"mFSXDDIf4rc0IfIYD6JVGAbmiaf1\",\n    //     Post_Id: \"444\",\n    //     Amount: 15,\n    //   }\n    //   return this.http.post(this.weatherURLV5 + '/solar_consumption', bid)\n    // }\n\n\n    // Error handling \n  handleError(error: { error: { message: string; }; status: any; message: any; }) {\n    let errorMessage = '';\n    if(error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n }\n\n  /////////////////////////FOR DEVELOPMENT AND TESTING //////////////////////////////////////////\n\n  //FOR DEBUGGING\n  //Gets the solar production data in an array\n  // getProduction(): Observable<Production> {\n  //   return this.http.get<Production>(this.weatherURL + '/solar_production')\n  // }\n\n\n  /////////////////////////END DEVELOPMENT AND TESTING //////////////////////////////////////////\n}\n","//This file handles most of the logic throughout the compnent\n\n//Imports\nimport { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FirebaseService } from '../services/firebase.service';\nimport { Observable } from 'rxjs';\n//From ex\nimport { ApiService } from '../services/api.service'; \n// from https://blog.logrocket.com/creating-a-crud-firebase-documents-in-angular/\nimport { AngularFirestore } from \"@angular/fire/firestore\";\nimport { AngularFirestoreCollection } from '@angular/fire/firestore';\nimport { AngularFireAuth } from '@angular/fire/auth';\n//import { FirebaseUser } from '@angular/fire/auth/User';\n\nimport { element } from 'protractor';\n//import { Users } from '../services/user.model';\n\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n  //From Ex\n  providers: [ApiService]\n})\nexport class HomeComponent implements OnInit {\n\n  isDarkTheme:boolean = true;\n\n  //Flags for where you are in the app\n  public Home:boolean = false;\n  public Profile:boolean = false;\n  public Wallet:boolean = false;\n  public History:boolean = false;\n  public Market:boolean = true;\n\n  //TESTING: UID accessing\n  public uid: string | undefined;\n\n  //TESTING\n  public currentUser: firebase.User | any;\n\n  //For reading firestore data\n  //Each \"collection\" needs its own observable!!!!\n  Users: Observable<any[]>;\n \n  //Logic for handeling event of a logout\n  @Output() isLogout = new EventEmitter<void>()\n\n\n  //Initializes firebase and all its services\n  constructor(\n    public firebaseService : FirebaseService,\n    private api : ApiService, \n    public firestore : AngularFirestore,\n    public auth: AngularFireAuth ) {\n    \n      //Firestore reading logic of User_Info\n      this.Users = this.firestore.collection<any>('User_Info').valueChanges();\n      \n      //TESTING\n      //Get current user\n      auth.authState.subscribe(user => {\n        this.currentUser = this.auth.currentUser;\n        console.log(user);\n      });\n    }\n\n      \n  //Logic to be executed on initilization of component\n  ngOnInit(): void {\n\n    //TESTING\n    //this.uid = this.auth.currentUser\n    //console.log(uid)\n  }\n\n  //Logout method\n  logout(){\n    this.firebaseService.logout()\n    this.isLogout.emit()\n  }\n\n  //For choosing which component will be displayed from the nav bar\n  showHome(){\n    this.Profile = false;\n    this.Wallet = false;\n    this.History = false;\n    this.Market = false;\n  }\n  showProfile(){\n    this.Profile = !this.Profile;\n    this.Wallet = false;\n    this.History = false;\n    this.Market = false;\n  }\n  showWallet(){\n    this.Wallet = !this.Wallet;\n    this.Profile = false;\n    this.History = false;\n    this.Market = false;\n  }\n  showHistory(){\n    this.History = !this.History;\n    this.Profile = false;\n    this.Wallet = false;\n    this.Market = false;\n  }\n  showMarket(){\n    this.Market = !this.Market;\n    this.Profile = false;\n    this.Wallet = false;\n    this.History = false;\n  }\n}\n\n//This section deals with pullling data from backend django\n//Non functional but leaving for reference \n/*\nexport class AppComponent {\n  movies = [{title: 'Titanic'}];\n\n  constructor(private api:ApiService){\n    this.getMovies();\n\n  }\n  //Function for getting it from API\n  //So confusing\n  getMovies = () => {\n\n    this.api.getAllMovies().subscribe(\n      data => {\n        this.movies = data\n      },\n      error => {\n        console.log(error);\n      }\n    )\n  }\n}\n*/\n","<!-- Once user has logegd in, they see this home page  -->\n\n<!-- CSS Style  -->\n<style>\n  button {\n    display: block;\n  }\n\n  .center {\n  text-align: center;\n  }\n\n  </style>\n<!-- End of CSS Style  -->\n\n<!-- Navigation Toolbar  -->\n<mat-toolbar style=\"background-color:DodgerBlue;\" [ngClass]=\"{'dark-theme-mode':isDarkTheme}\">\n\n  <!-- Ttile based on logged in placeholder user  -->\n  <span>HELIUS V5</span>\n  \n  <!-- Fix getting Name for the title of the Nav Bar -->\n  <!-- <span *ngIf=\"let name of currentUser | async\">{{name.email}}</span> -->\n<button mat-icon-button [matMenuTriggerFor]=\"menu\" aria-label=\"Example icon-button with a menu\">\n  <mat-icon>menu</mat-icon>\n  \n\n</button><mat-menu #menu=\"matMenu\" [ngClass]=\"{'dark-theme-mode':isDarkTheme}\">\n  <button  mat-menu-item (click)=\"showHome()\" class=\"btn home\">Home</button>\n  <button mat-menu-item (click)=\"showProfile()\" class=\"btn profile\">Profile</button>\n  <button mat-menu-item (click)=\"showWallet()\" class=\"btn wallet\">Wallet</button>\n  <button mat-menu-item (click)=\"showHistory()\"class=\"btn history\">History</button>\n  <button mat-menu-item (click)=\"showMarket()\"class=\"btn market\">Market</button>\n  <button mat-menu-item (click)=\"logout()\">Logout</button>\n  \n</mat-menu>\n<span style=\"flex:auto\"></span>\n<mat-slide-toggle color=\"primary\">Dark Theme</mat-slide-toggle>\n</mat-toolbar>\n <!-- End of Navigation Toolbar  -->\n\n<!-- Button Activation for diffrent sections -->\n<div id=\"home\" *ngIf=\"Home\">\n  <app-home></app-home>\n</div>\n\n<div id=\"profile\" *ngIf=\"Profile\">\n  <app-profile ></app-profile>\n</div>\n\n<div id=\"wallet\" *ngIf=\"Wallet\">\n  <app-wallet></app-wallet>\n</div>\n\n<div id=\"history\" *ngIf=\"History\">\n  <app-history></app-history>\n</div>\n\n<div id=\"market\" *ngIf=\"Market\">\n  <app-market></app-market>\n</div>\n\n<!-- For Debugging -->\n<!-- <span class=\"example-spacer\" *ngFor=\"let name of Users | async\">UID: {{uid}} kWh</span> -->\n\n\n<!-- Templete for reading from Firebase\n<li class=\"text\" *ngFor=\"let name of Users | async\">\n  {{name.name}}\n</li>\nEnd of template for reading from Firebase-->\n\n\n<!-- Navigation Toolbar  \n<button (click)=\"showHome()\" class=\"btn home\">Home</button>\n<button (click)=\"showProfile()\" class=\"btn profile\">Profile</button>\n<button (click)=\"showWallet()\" class=\"btn wallet\">Wallet</button>\n<button (click)=\"showHistory()\"class=\"btn history\">History</button>\n<button (click)=\"showMarket()\"class=\"btn market\">Market</button>\n-->\n\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  \n  firebase: {\n    apiKey: \"AIzaSyACqLx1Hwj0sZ7OWWo7LpgQyYpTHiwgNqY\",\n    authDomain: \"helius-70808.firebaseapp.com\",\n    projectId: \"helius-70808\",\n    storageBucket: \"helius-70808.appspot.com\",\n    messagingSenderId: \"475929370500\",\n    appId: \"1:475929370500:web:cf04f39d3a9d487d9d07d1\",\n    measurementId: \"G-SWCJ32CMDT\"\n  }\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","//Imports\nimport { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FirebaseService } from '../services/firebase.service';\nimport { Observable } from 'rxjs';\n\n//From ex\nimport { ApiService } from '../services/api.service'; \n\n// from https://blog.logrocket.com/creating-a-crud-firebase-documents-in-angular/\nimport { AngularFirestore } from \"@angular/fire/firestore\";\nimport { element } from 'protractor';\n\n\n@Component({\n  selector: 'app-wallet',\n  templateUrl: './wallet.component.html',\n  styleUrls: ['./wallet.component.css'],\n  //From Ex\n  providers: [ApiService]\n\n})\n\nexport class WalletComponent implements OnInit {\n\n  Users: Observable<any[]>;\n\n  constructor(\n    public firebaseService : FirebaseService,\n      private api : ApiService, \n      firestore : AngularFirestore ) {\n\n        //Firestore reading logic\n        this.Users = firestore.collection('Users').valueChanges();\n\n      }\n  \n\n  ngOnInit(): void {\n  }\n\n}\n","<!-- Basic Wallet Info  -->\n\n<mat-list role=\"list\">\n    <mat-list-item role=\"listitem\" class=\"center\" lass=\"text\" *ngFor=\"let name of Users | async\" >Current Coins: {{name.wallet}}</mat-list-item>\n</mat-list>","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ApiService {\n\n  //URL of django sever\n  baseurl = 'http://127.0.0.1:8000';\n\n  //Headers for HTTP\n  httpHeaders = new HttpHeaders({'Content-Type': 'application/json'})\n\n  constructor(private http: HttpClient) { }\n\n  //function for getting movie data from django\n  getAllMovies(): Observable<any>{\n    return this.http.get(this.baseurl + '/movies/', \n    {headers: this.httpHeaders});\n\n  }\n}\n","//This file handles most of the logic throughout the compnent\n\n//Imports\nimport { Component } from '@angular/core';\n\n//From https://github.com/angular/angularfire/blob/master/docs/install-and-setup.md\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\n\n//These are sevices we use to connect to stuff\n//Taken from the services folder\nimport { FirebaseService } from './services/firebase.service';\nimport { ApiService } from './services/api.service'; \n\n\n//Component defintion\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [ApiService]\n})\n\n//Basiclly the main() of the compnent \nexport class AppComponent  {\n\n  //Variable declerations\n  title = 'helius';\n  isSignedIn = false;\n  \n  //For reading firestore data\n  Users: Observable<any[]>;\n\n  //Initializes firebase and all its services\n  constructor(\n    public firebaseService : FirebaseService,\n    private api : ApiService, \n    firestore : AngularFirestore ) {\n    \n      //Firestore reading logic\n      this.Users = firestore.collection('Users').valueChanges();\n\n    }\n    \n  ngOnInit(){\n\n    //Checking if user is signed in\n    if(localStorage.getItem('user')!== null)\n      this.isSignedIn = true\n    else\n      this.isSignedIn = false\n\n  }\n\n  //Handles signup functionality\n  //TODO\n  /*\n  async onSignup(email: string, password:string){\n    await this.firebaseService.signup(email,password)\n    if(this.firebaseService.isLoggedIn)\n    this.isSignedIn = true\n  }\n  */\n\n  //Handles signin functionality\n  async onSignin(email: string, password:string){\n    await this.firebaseService.signin(email,password)\n    if(this.firebaseService.isLoggedIn)\n    this.isSignedIn = true\n  }\n\n  //Logout functionality\n  handleLogout(){\n    this.isSignedIn = false\n  }\n\n}\n","<!--This is the main HTML of the Login Page -->\n\n<!--CSS Styles for centering -->\n<style>\n  .container { \n    height: 100px;\n    position: relative;\n  }\n  \n  .vertical-center {\n    margin: 0;\n    position: absolute;\n    top: 50%;\n    -ms-transform: translateY(-50%);\n    transform: translateY(-50%);\n  }\n  \n  .center {\n  text-align: center;\n  margin: 30px;\n  }\n\n\n  </style>\n<!--end of CSS Styles for centering -->\n\n\n<!--Title of page -->\n<!--End of Title of page -->\n\n\n\n<!--Sign in component -->\n<div class=\"center\" *ngIf=\"!isSignedIn\">\n  <form class=\"example-form\">\n    <mat-form-field class=\"example-full-width\">\n      <mat-label>Email</mat-label>\n      <input matInput placeholder=\"Ex. Pizza\" value=\"test@helius.com\" #email>\n    </mat-form-field>\n  \n    <mat-form-field class=\"example-full-width\">\n      <mat-label>Password</mat-label>\n      <input matInput placeholder=\"Ex. It makes me feel...\" value=\"123456\" #password>\n    </mat-form-field>\n    <button mat-raised-button (click)=\"onSignin(email.value,password.value)\">Sign In</button>\n  </form>\n</div>\n<!--End of Sign in component -->\n\n<!--Logout Handler -->\n<app-home *ngIf=\"isSignedIn\" (isLogout)=\"handleLogout()\"></app-home>\n<!--End of Logout Handler -->\n\n\n\n","//Imports\nimport { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FirebaseService } from '../services/firebase.service';\nimport { Observable } from 'rxjs';\nimport { map, filter, tap } from 'rxjs/operators'\n\n//From ex\nimport { ApiService } from '../services/api.service'; \n// from https://blog.logrocket.com/creating-a-crud-firebase-documents-in-angular/\nimport { AngularFirestore } from \"@angular/fire/firestore\";\nimport { element } from 'protractor';\nimport { firestore } from 'firebase';\n\nexport interface Users {\n  Name: string;\n  DOB: string;\n  Address: string;\n  City: string;\n  Email: string\n  Panels: number;\n  Phone: string;\n  PostalCode: string;\n  Province: string;\n\n}\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css'],\n  //From Ex\n  providers: [ApiService],\n  template:`\n  `\n})\nexport class ProfileComponent implements OnInit {\n\n  Users: Observable<Users[]> | undefined;\n  Data: Users[] = [];\n  currentUser = \"mFSXDDIf4rc0IfIYD6JVGAbmiaf1\";\n\n  constructor(\n    public firebaseService : FirebaseService,\n      private api : ApiService, \n      public firestore : AngularFirestore ) {\n\n        //Generates observable on User_Info\n        firestore.collection(\"User_Info\").get().toPromise().then()\n\n        const dbRef = firestore.collection<Users>('User_Info').valueChanges().subscribe((data) => {\n          this.Data = data;\n        })\n      }\n\n    \n  ngOnInit(): void {\n\n  }\n}\n","\n<!-- Basic Profile Info  -->\n<mat-list role=\"list\">\n    <mat-list-item role=\"listitem\" class=\"center\" lass=\"text\" *ngFor=\"let name of Data\">Name: {{name.Name}}</mat-list-item>\n</mat-list>\n\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore } from '@angular/fire/firestore';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FirebaseService {\n\n  isLoggedIn = false;\n  constructor(public firebaseAuth: AngularFireAuth,\n     private http: HttpClient,\n     private firestore: AngularFirestore\n     ) { }\n\n  //Authenticating with firebase email and login\n  async signin(email : string, password : string){\n    await this.firebaseAuth.signInWithEmailAndPassword(email,password)\n    .then(res=>{\n      this.isLoggedIn = true\n      localStorage.setItem('user',JSON.stringify(res.user))\n    })\n  }\n\n  //Signining up with firebase auth\n  async signup(email : string, password : string){\n    await this.firebaseAuth.createUserWithEmailAndPassword(email,password)\n    .then(res=>{\n      this.isLoggedIn = true\n      localStorage.setItem('user',JSON.stringify(res.user))\n    })\n  }\n\n  logout(){\n    this.firebaseAuth.signOut()\n    localStorage.removeItem('user')\n  }\n\n  getPostings(){\n    return this.firestore.collection('Postings').snapshotChanges();\n  }\n\n  getUsers(){\n    return this.firestore.collection('User_Info').snapshotChanges();\n  }\n}\n","//Basic Routing\nimport { AppRoutingModule } from './app-routing.module';\n\n//From https://github.com/angular/angularfire/blob/master/docs/install-and-setup.md\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { AngularFireModule } from '@angular/fire';\nimport { environment } from '../environments/environment';\nimport { AngularFireAnalyticsModule } from '@angular/fire/analytics';\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\n\n//Added for firebase authentication\nimport { AngularFireAuthModule } from \"@angular/fire/auth\";\nimport { AngularFireDatabaseModule } from \"@angular/fire/database\";\nimport { HomeComponent } from './home/home.component';\nimport { FirebaseService } from './services/firebase.service';\n\n//From https://stackoverflow.com/questions/52523258/angularfire2-cant-find-module-firebase-app/55237532\n//import { AngularFireAuth } from '@angular/fire/auth';\n\n//Added fro htttp connections connection\nimport { HttpClientModule } from '@angular/common/http';\n\n//added from https://www.youtube.com/watch?v=TucRRB57fi8&t=336s\nimport { FormsModule } from '@angular/forms';\nimport { ProfileComponent } from './profile/profile.component';\nimport { WalletComponent } from './wallet/wallet.component';\nimport { HistoryComponent } from './history/history.component';\nimport { MarketComponent } from './market/market.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n//Angular Material Stuff\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\n//I keep the new line\n//Fireatore stuff\nimport { AngularFirestoreCollection } from '@angular/fire/firestore';\n\n//Theme stuff\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\n// Forms module\n\n@NgModule({\n\tdeclarations: [\n\t\tAppComponent,\n\t\tHomeComponent,\n\t\tProfileComponent,\n\t\tWalletComponent,\n\t\tHistoryComponent,\n\t\tMarketComponent,\n\t],\n\timports: [\n\t\tBrowserModule,\n\t\tAppRoutingModule,\n\t\tFormsModule,\n\t\tAngularFireAnalyticsModule,\n\t\tAngularFirestoreModule,\n\t\tAngularFireModule.initializeApp(environment.firebase),\n\t\tMatSliderModule,\n\t\tMatMenuModule,\n\t\tMatIconModule,\n\t\tMatButtonModule,\n\t\tMatToolbarModule,\n\t\tMatInputModule,\n\t\tMatListModule,\n\t\tMatGridListModule,\n\t\tMatTableModule,\n\t\tMatSlideToggleModule,\n\t\tMatFormFieldModule,\n\t\tReactiveFormsModule,\n\t\tMatSnackBarModule,\n\n\t\t//Firebase setup\n\t\tAngularFireModule.initializeApp({\n\t\t\tapiKey: \"AIzaSyACqLx1Hwj0sZ7OWWo7LpgQyYpTHiwgNqY\",\n\t\t\tauthDomain: \"helius-70808.firebaseapp.com\",\n\t\t\tprojectId: \"helius-70808\",\n\t\t\tstorageBucket: \"helius-70808.appspot.com\",\n\t\t\tmessagingSenderId: \"475929370500\",\n\t\t\tappId: \"1:475929370500:web:cf04f39d3a9d487d9d07d1\",\n\t\t\tmeasurementId: \"G-SWCJ32CMDT\"\n\t\t}),\n\t\tAngularFireAuthModule,\n\t\tAngularFireDatabaseModule,\n\n\t\t//For HTTP connecting\n\t\tHttpClientModule,\n\n\t\tBrowserAnimationsModule\n\t],\n\tproviders: [FirebaseService],\n\tbootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FirebaseService } from '../services/firebase.service';\nimport { Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n//From ex\nimport { ApiService } from '../services/api.service'; \n// from https://blog.logrocket.com/creating-a-crud-firebase-documents-in-angular/\nimport { AngularFirestore } from \"@angular/fire/firestore\";\nimport { AngularFirestoreCollection } from '@angular/fire/firestore';\nimport { HttpClient } from '@angular/common/http';\nimport { AngularFireAuthModule } from '@angular/fire/auth';\n\n\n//TESTING\nimport { element } from 'protractor';\nimport {MatTableModule} from '@angular/material/table';\nimport { TestBed } from '@angular/core/testing';\nimport {MDCDataTable} from '@material/data-table';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormControl } from '@angular/forms';\nimport {MatSnackBar} from '@angular/material/snack-bar';\n\n\n\n//New rest stuff\nimport { RestApiService } from \"../shared/rest-api.service\";\nimport { snapshotChanges } from '@angular/fire/database';\n\n//Theming\nimport {OverlayContainer} from '@angular/cdk/overlay';\nimport { DOCUMENT } from '@angular/common';\nimport { time } from '@tensorflow/tfjs';\n\nimport { IgxTimePickerModule } from \"igniteui-angular\";\n//import { TimePickerSample1Component } from \"./timepicker-sample-1/timepicker-sample-1.component\";\nimport {formatDate} from '@angular/common';\n\n\n\n\n\n\n//Interfaces for Objects\nexport interface Postings {\n  user_name: string;\n  Energy: number;\n}\n\nexport interface user {\n  uid: string;\n}\n\nexport interface test {\n  length: number;\n  chain: string;\n  peers: string;\n}\n\nexport interface bid {\n  uid:  String;\n  Post_Id: String;\n  Amount: number;\n}\n\nexport interface transaction {\n  author: String;\n  buyer:  String;\n  seller: String;\n  quantity: number;\n  bidValue: number;\n}\n\nexport interface port {\n  node_ddress: String;\n}\n\n\n@Component({\n  selector: 'app-market',\n  templateUrl: './market.component.html',\n  styleUrls: ['./market.component.css'],\n  //From Ex\n  providers: [ApiService],\n  template: \n  `\n  <ul>\n    <li *ngFor=\"let item of items | async\">\n      {{ item.name }}\n    </li>\n  </ul>\n  <div >Sum of Production Array = {{ProductionArraySum}}</div>\n  `\n})\nexport class MarketComponent implements OnInit {\n  \n  //Firestore data reading/writing\n  private itemCollection: AngularFirestoreCollection<Postings>;\n  items: Observable<Postings[]> | undefined;\n  Users: Observable<any>;\n  \n  //for HTTP stuff\n  data: Observable<test[]> | undefined;\n  number: test | undefined;\n  walletValue: any | undefined;\n  \n  \n  postings: Postings[] | undefined;\n\n  //STABLE\n  //Basic chain object\n  Chain: any = [];\n  \n\n  displayedColumns = ['user_name',  'Energy', 'Bid', 'Bid Button'];\n  dataSource: Observable<Postings[]> | any;\n  dataDisplay: Observable<test[]> | undefined;\n\n  //Production variables\n  Production: any = [];\n  Consumption: any = [];\n  Surplus: any = [];\n\n  //value = 'Enter Bid';\n  \n  /////////////////////////START DEVELOPMENT AND TESTING //////////////////////////////////////////\n  \n  //temp user\n  parser = new DOMParser();\n\n  testval = 0;\n  currentUser = \"zvDRU1bQ0uNJTupmjnRt10MktYF3\";\n  // uid = JSON.parse(window.localStorage.getItem('user'));\n  // uid2 = \"\"\n  //let obj = JSON.parse(current)\n  //Basic date\n  //myDate = new Date;\n\n\n  today: number = Date.now();\n  myDate: any = new Date();\n\n\n\n\n  //URL Links\n  //readonly ROOT_URL = \"https://jsonplaceholder.typicode.com\"\n  //readonly SERVER_URL = \"http://127.0.0.1:8000\"\n  //dataTest:Observable<any[]>;\n  //buttonTest = '1';\n  ProductionArraySum: number[] = [];\n  testBuy: String = \"\";\n\n  //var d = new Date();\n\n  //new Date().toLocaleTimeString();\n\n\n\n  \n  //myDate now: = new Date();\n  //var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n\n  /////Dynamic form stuff\n  name = new FormControl('');\n\n  //Snackbar thing\n  durationInSeconds = 5;\n  \n\n  /////////////////////////END DEVELOPMENT AND TESTING //////////////////////////////////////////\n\n  //Initializes APIs for use throughout Helius\n  constructor(\n    public firebaseService : FirebaseService,\n    private api : ApiService, \n    private firestore : AngularFirestore,\n    private http: HttpClient,\n    public restApi: RestApiService,\n    overlayContainer: OverlayContainer,\n    auth: AngularFireAuthModule,\n    private _snackBar: MatSnackBar\n      ) {\n    \n      //Firestore reading logic\n      this.Users = firestore.collection('Users').doc(this.currentUser).valueChanges();\n      this.itemCollection = this.firestore.collection('Postings');\n      this.items = this.itemCollection.valueChanges();\n      //this.myDate = this.datePipe.transform(this.myDate, 'yyyy-MM-dd');\n\n      //TESTING\n      //this.currentUser = this.firebaseService.firebaseAuth.currentUser.uid();\n      //overlayContainer.getContainerElement().classList.add('dark-theme-mode');\n      //this.items = this.itemCollection.valueChanges()._subscribe( data => {\n    }\n\n    openSnackBar(message: string, action: string) {\n      this._snackBar.open(message, action, {\n        duration: 2000,\n      });\n    }\n    \n    //Gets values in current users wallet\n    checkWallet(){\n      this.walletValue = this.firestore.collection(\"Users\").get()\n    }\n    \n    addItem(item: Postings) {\n      this.itemCollection.add(item);\n    }\n\n    //TODO add parameters to function to specifly deletes\n    deletePosting(seller: string){\n      this.firestore.collection(\"Postings\").doc(seller).delete();\n    }\n\n    //Sends V4s port address to V5s node server\n    connectToNetwork(){\n      let port = {\n        node_address: 'localhost:8000',\n      }\n      this.restApi.connectToChain(port);\n    }\n\n    //TESTING\n    //passsing UID around\n    passUid(uid:string){\n      // this.uid2 = uid;\n    }   \n\n    //When the compnent loads, these functions run\n    async ngOnInit(){\n      this.dataSource = this.items;\n      \n      //Pulling Postings from firbase \"Postings\"\n      this.firebaseService.getPostings().subscribe(data => {\n        this.postings = data.map(e => {\n          return {\n            user_name: e.payload.doc.id,\n            Energy: e.payload.doc.data()\n          } as unknown as Postings\n        })\n      })\n    }\n\n\n  /////////////////////////FOR DEVELOPMENT AND TESTING //////////////////////////////////////////\n\n   //Called when a user selects \"Bid\" in posting\n   buyEnergy(postID: number, Energy: number, bidValue: number){\n\n    // Get \"author\", \"buyer\", \"seller\", \"quantity\"\n    // let transaction = {\n    //     author: \"Marko\",\n    //     buyer:  \"Marko\",\n    //     seller: seller,\n    //     quantity: quantity,\n    //     //bidValue: bidValue,\n    //   }\n    //   send data to chain for processing  \n    //   this.restApi.postChain(transaction);\n\n      //convert bidVal to int for sure\n      //var safeBidVal= parseInt(bidVal)\n\n      //bidValue.toString()\n      this.openSnackBar(\"Submitted bid of:\", \"Suck it\" )\n\n      this.today\n\n      // this.myDate.format(this.myDate.setDate(this.myDate.getDate()))\n\n      \n      this.testval = bidValue\n      var tempPostID = postID.toString()\n\n      //Send bid to server\n      let bid = {\n        uid:  this.currentUser,\n        Post_Id: tempPostID,\n        Amount: bidValue,\n      }\n\n      console.log(bid)\n      this.postBid(bid)\n\n      //Delete Posting\n      //this.deletePosting(seller)\n    }\n\n    \n  //Loads the entire chain\n  loadChain() {\n    return this.restApi.getChain().subscribe((data: {}) => {\n      this.Chain.push(data)\n    })};\n  \n    //Adds a placeholder posting for testing\n    addPosting(){\n      var markoUpdate = this.firestore.collection(\"Postings\").doc(\"Marko\")\n      markoUpdate.set({\n        user_name: \"Marko\",\n        Energy: 345,\n      });\n\n      var shaunUpdate = this.firestore.collection(\"Postings\").doc(\"Shaun\")\n      shaunUpdate.set({\n        user_name: \"Shaun\",\n        Energy: 500,\n      });\n\n      var yashUpdate = this.firestore.collection(\"Postings\").doc(\"Yash\")\n      yashUpdate.set({\n        user_name: \"Yash\",\n        Energy: 333,\n      });\n\n      var yassineUpdate = this.firestore.collection(\"Postings\").doc(\"Yassine\")\n      yassineUpdate.set({\n        user_name: \"Yassine\",\n        Energy: 420,\n      });\n    }\n\n    addUserPosting(){\n\n      this.myDate.setDate(this.myDate.getDate() + 1);\n\n\n      //Create random ID\n      var randDocId = Math.floor(Math.random() * 100000).toString();\n\n      //Make a new posting using ranomd ID\n      var userUpdate = this.firestore.collection(\"Postings\").doc(randDocId)\n      userUpdate.set({\n        Energy: 666,\n        Owner: this.currentUser,\n        PostID: randDocId,\n        \n        //Hardcoded time\n        Time: this.myDate.toString()\n      });\n    }\n  //Calculate the sum of the production array\n  //FUCK THIS\n  calcSumProductionArray(){\n    var sum = 1;\n    let temp: any[] = [];\n    var i;\n\n    for(i in this.Production){\n      this.ProductionArraySum[0] += this.Production[i];\n      //this.ProductionArraySum += this.Production[i];\n    }\n  }\n\n  //Sends request for solar production data\n  postProduction(){\n    return this.restApi.postProduction().subscribe((data: {}) => {\n      this.Production.push(data)\n      //let var = data;\n      this.calcSumProductionArray();\n  })};\n\n  //Sends request for solar production data\n  postConsumption(){\n    return this.restApi.postConsumption().subscribe((data: {}) => {\n      this.Consumption.push(data)\n  })};\n\n  postBid(bid: bid){\n    return this.restApi.postBid(bid).subscribe((data: {}) => {\n      //this.Consumption.push(data)\n  })};\n\n  //Sends request for solar production data\n  postSurplus(){\n    return this.restApi.postSurplus().subscribe((data: {}) => {\n      this.Consumption.push(data)\n  })};\n\n  getBidValue(bid: number){\n    console.warn(bid)\n  }\n\n\n\n\n  /////////////////////////END DEVELOPMENT AND TESTING //////////////////////////////////////////\n  \n  //   this.Production = this.restApi.postProduction();\n  // }\n  \n  //   isLoggedIn() {\n  //     return this.afAuth.authState.pipe(first()).toPromise();\n  //  }\n\n  //Sends dummy data to chain\n  newTransaction(){\n    //this.restApi.postChain();\n  }\n\n  cleanProdArray(){\n    this.Production = 0;\n  }\n      //FOR DEBUGGING ONLY\n  // loadProduction() {\n  //     //this.restApi.getProduction();\n  //     return this.restApi.getProduction().subscribe((data: {}) => {\n  //       this.Production.push(data)\n  //   })};\n\n};","<!doctype html>\n<html color=\"primary\">\n\n<head>\n<meta charset=\"utf-8\">\n</head>\n\n  <!-- Marketplace table -->\n<table mat-table color=\"primary\" [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n\n  <!-- Seller Column -->\n  <ng-container matColumnDef=\"user_name\">\n    <th mat-header-cell *matHeaderCellDef> Post Id </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.PostID}} </td>\n  </ng-container>\n\n  <!-- Cost Column -->\n  <ng-container matColumnDef=\"Energy\">\n    <th mat-header-cell *matHeaderCellDef> Energy </th>\n    <td mat-cell *matCellDef=\"let element\">{{element.Energy}} \n      <!-- <button  mat-raised-button color=\"warn\" (click)=\"buyEnergy(element.user_name, element.Energy)\">Bid</button> -->\n      <!-- <input matInput type=\"text\" [(ngModel)]=\"value\"> -->\n    </td>\n  </ng-container>\n\n  <!-- Bid Column -->\n  <ng-container matColumnDef=\"Bid\">\n    <th mat-header-cell *matHeaderCellDef> Bid Value </th>\n    <!-- Cell Contents -->\n    <td mat-cell  *matCellDef=\"let element\" >\n    <!-- Bid Input Section -->\n    <mat-form-field class=\"example-form-field\" appearance=\"outline\" >\n      <input matInput type=\"number\" value=666 id=\"{{element}}\" [formControl]=\"name\">\n      <!-- <button mat-button  matSuffix mat-icon-button aria-label=\"Clear\" > -->\n        <!-- <mat-icon>close</mat-icon> -->\n      <!-- </button> -->\n    </mat-form-field>\n    \n    </td>\n  </ng-container>\n\n  <!-- Bid Button Column -->\n  <ng-container matColumnDef=\"Bid Button\">\n    <th mat-header-cell *matHeaderCellDef> Bid Button </th>\n    <!-- Cell Contents -->\n    <td mat-cell *matCellDef=\"let element\">\n    <!-- Bid Button -->\n      <button mat-raised-button color=\"warn\" (click)=\"buyEnergy(element.PostID, element.Energy, name.value)\">Bid</button>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n<br>\n\n<!--  /////////////////////////START DEVELOPMENT AND TESTING ////////////////////////////////////////// -->\n\n<!-- Posting Utilities -->\n<h1>Testing Utilities</h1>\n<h2>Posting Tools</h2>\n<button mat-raised-button color=\"primary\" (click)=\"addPosting()\">Add Temp Postings</button>\n<button mat-raised-button color=\"primary\" (click)=\"addUserPosting()\">Add User Posting</button>\n\n<br>\n\n<!-- Blockchain Utilities-->\n<h2>BlockChain Tools</h2>\n<button mat-raised-button color=\"primary\" (click)=\"loadChain()\">Load Chain</button>\n<button mat-raised-button color=\"primary\" (click)=\"connectToNetwork()\">Connect to v4 Network</button>\n<br>\n\n<!-- Solar Production Utilities-->\n<h2>Solar Production Tools</h2>\n<button mat-raised-button color=\"primary\" (click)=\"postProduction()\">\"Post\" Production</button>\n<button mat-raised-button color=\"primary\" (click)=\"calcSumProductionArray()\">Sum Production Array</button>\n<button mat-raised-button color=\"primary\" (click)=\"cleanProdArray()\">Clean Production Array</button>\n<br>\n\n<!-- Solar Production Utilities-->\n<h2>Solar Consumption Tools</h2>\n<button mat-raised-button color=\"primary\" (click)=\"postConsumption()\">\"Post\" Consumption</button>\n<br>\n\n<!-- Solar Surplus Utilities-->\n<h2>Solar Surplus Tools</h2>\n<button mat-raised-button color=\"primary\" (click)=\"postSurplus()\">\"Post\" Surplus</button>\n<br>\n\n<!-- Bid Utilities -->\n<h2>Bid Tools</h2>\n<label>\n  Name:\n  <input type=\"text\" [formControl]=\"name\">\n</label>\n<p>\n  Value: {{ name.value }}\n</p>\n\n<!-- Data Viz-->\n<h2>Data Visualizations</h2>\n<br>\n<div *ngFor=\"let chain of Chain\">\n  CHAIN: {{chain | json}}\n</div>\n<br>\n<div *ngFor=\"let prod of Production\">\n  PRODUCTION: {{prod | json}}\n</div>\n<br>\n<div *ngFor=\"let cons of Consumption\">\n  CONSUMPTION: {{cons | json}}\n</div>\n\n<!-- Other Viz -->\n<h2>Testing Visualizations</h2>\n<div >Sum of Production Array = {{ProductionArraySum}}</div>\n<div >Test Values = {{today |  date:'shortTime'}}</div>\n\n\n\n\n<!-- DEPRECATED -->\n<!-- <button mat-raised-button color=\"primary\" (click)=\"loadProduction()\">Load Production data</button> -->\n<!-- <button mat-raised-button color=\"primary\" (click)=\"newTransaction()\">Post Chain</button> -->\n<!-- <button mat-raised-button color=\"primary\" (click)=\"passUid(uid.uid)\">Passit!</button> -->\n<!-- <div >Uid = {{uid2}}</div> -->\n<!-- Basic examples of reading from firebase-->\n<!-- <p>Todays date is: {{myDate | date:'shortDate'}} </p> -->\n<!-- <span class=\"example-spacer\" *ngFor=\"let name of Users | async\">Your expected prodiction today is {{name.prod}} kWh</span> -->\n<!-- <span class=\"example-spacer\" *ngFor=\"let name of Users | async\">Your expected prodiction today is {{name.cons}} kWh</span> -->\n<!-- <span class=\"example-spacer\" *ngFor=\"let name of Users | async\">Your expected surplus today is {{name.prod - name.cons}} kWh</span> -->\n<!-- <span class=\"example-spacer\" *ngFor=\"let name of Users | async\">Wallet: {{name.wallet}} </span> -->\n\n<!--  /////////////////////////END DEVELOPMENT AND TESTING ////////////////////////////////////////// -->","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-history',\n  templateUrl: './history.component.html',\n  styleUrls: ['./history.component.css']\n})\nexport class HistoryComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>history works!</p>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n//Imports to routing HTTP\nimport { MarketComponent } from './market/market.component';\n\n\nconst routes: Routes = [\n  { path: 'market', component: MarketComponent}\n  \n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}