export class IgxExporterOptionsBase {
    constructor(fileName, _fileExtension) {
        this._fileExtension = _fileExtension;
        /**
         * Specifies whether hidden columns should be exported.
         * ```typescript
         * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;
         * this.exportOptions.ignoreColumnsVisibility = true;
         * ```
         *
         * @memberof IgxExporterOptionsBase
         */
        this.ignoreColumnsVisibility = false;
        /**
         * Specifies whether filtered out rows should be exported.
         * ```typescript
         * let ignoreFiltering = this.exportOptions.ignoreFiltering;
         * this.exportOptions.ignoreFiltering = true;
         * ```
         *
         * @memberof IgxExporterOptionsBase
         */
        this.ignoreFiltering = false;
        /**
         * Specifies if the exporter should ignore the current column order in the IgxGrid.
         * ```typescript
         * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;
         * this.exportOptions.ignoreColumnsOrder = true;
         * ```
         *
         * @memberof IgxExporterOptionsBase
         */
        this.ignoreColumnsOrder = false;
        /**
         * Specifies whether the exported data should be sorted as in the provided IgxGrid.
         * ```typescript
         * let ignoreSorting = this.exportOptions.ignoreSorting;
         * this.exportOptions.ignoreSorting = true;
         * ```
         *
         * @memberof IgxExporterOptionsBase
         */
        this.ignoreSorting = false;
        this.setFileName(fileName);
    }
    setFileName(fileName) {
        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');
    }
    /**
     * Gets the file name which will be used for the exporting operation.
     * ```typescript
     * let fileName = this.exportOptions.fileName;
     * ```
     *
     * @memberof IgxExporterOptionsBase
     */
    get fileName() {
        return this._fileName;
    }
    /**
     * Sets the file name which will be used for the exporting operation.
     * ```typescript
     * this.exportOptions.fileName = 'exportedData01';
     * ```
     *
     * @memberof IgxExporterOptionsBase
     */
    set fileName(value) {
        this.setFileName(value);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0ZXItb3B0aW9ucy1iYXNlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2V4cG9ydGVyLWNvbW1vbi9leHBvcnRlci1vcHRpb25zLWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFnQixzQkFBc0I7SUErQ3hDLFlBQVksUUFBZ0IsRUFBWSxjQUFzQjtRQUF0QixtQkFBYyxHQUFkLGNBQWMsQ0FBUTtRQTlDOUQ7Ozs7Ozs7O1dBUUc7UUFDSSw0QkFBdUIsR0FBRyxLQUFLLENBQUM7UUFFdkM7Ozs7Ozs7O1dBUUc7UUFDSSxvQkFBZSxHQUFHLEtBQUssQ0FBQztRQUUvQjs7Ozs7Ozs7V0FRRztRQUNJLHVCQUFrQixHQUFHLEtBQUssQ0FBQztRQUVsQzs7Ozs7Ozs7V0FRRztRQUNJLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBS3pCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVPLFdBQVcsQ0FBQyxRQUFnQjtRQUNoQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUcsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxJQUFJLFFBQVE7UUFDUixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxJQUFJLFFBQVEsQ0FBQyxLQUFLO1FBQ2QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgYWJzdHJhY3QgY2xhc3MgSWd4RXhwb3J0ZXJPcHRpb25zQmFzZSB7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHdoZXRoZXIgaGlkZGVuIGNvbHVtbnMgc2hvdWxkIGJlIGV4cG9ydGVkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgaWdub3JlQ29sdW1uc1Zpc2liaWxpdHkgPSB0aGlzLmV4cG9ydE9wdGlvbnMuaWdub3JlQ29sdW1uc1Zpc2liaWxpdHk7XG4gICAgICogdGhpcy5leHBvcnRPcHRpb25zLmlnbm9yZUNvbHVtbnNWaXNpYmlsaXR5ID0gdHJ1ZTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeHBvcnRlck9wdGlvbnNCYXNlXG4gICAgICovXG4gICAgcHVibGljIGlnbm9yZUNvbHVtbnNWaXNpYmlsaXR5ID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgd2hldGhlciBmaWx0ZXJlZCBvdXQgcm93cyBzaG91bGQgYmUgZXhwb3J0ZWQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBpZ25vcmVGaWx0ZXJpbmcgPSB0aGlzLmV4cG9ydE9wdGlvbnMuaWdub3JlRmlsdGVyaW5nO1xuICAgICAqIHRoaXMuZXhwb3J0T3B0aW9ucy5pZ25vcmVGaWx0ZXJpbmcgPSB0cnVlO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIElneEV4cG9ydGVyT3B0aW9uc0Jhc2VcbiAgICAgKi9cbiAgICBwdWJsaWMgaWdub3JlRmlsdGVyaW5nID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgaWYgdGhlIGV4cG9ydGVyIHNob3VsZCBpZ25vcmUgdGhlIGN1cnJlbnQgY29sdW1uIG9yZGVyIGluIHRoZSBJZ3hHcmlkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgaWdub3JlQ29sdW1uc09yZGVyID0gdGhpcy5leHBvcnRPcHRpb25zLmlnbm9yZUNvbHVtbnNPcmRlcjtcbiAgICAgKiB0aGlzLmV4cG9ydE9wdGlvbnMuaWdub3JlQ29sdW1uc09yZGVyID0gdHJ1ZTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeHBvcnRlck9wdGlvbnNCYXNlXG4gICAgICovXG4gICAgcHVibGljIGlnbm9yZUNvbHVtbnNPcmRlciA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIGV4cG9ydGVkIGRhdGEgc2hvdWxkIGJlIHNvcnRlZCBhcyBpbiB0aGUgcHJvdmlkZWQgSWd4R3JpZC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGlnbm9yZVNvcnRpbmcgPSB0aGlzLmV4cG9ydE9wdGlvbnMuaWdub3JlU29ydGluZztcbiAgICAgKiB0aGlzLmV4cG9ydE9wdGlvbnMuaWdub3JlU29ydGluZyA9IHRydWU7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgSWd4RXhwb3J0ZXJPcHRpb25zQmFzZVxuICAgICAqL1xuICAgIHB1YmxpYyBpZ25vcmVTb3J0aW5nID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIF9maWxlTmFtZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZmlsZU5hbWU6IHN0cmluZywgcHJvdGVjdGVkIF9maWxlRXh0ZW5zaW9uOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZXRGaWxlTmFtZShmaWxlTmFtZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRGaWxlTmFtZShmaWxlTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2ZpbGVOYW1lID0gZmlsZU5hbWUgKyAoZmlsZU5hbWUuZW5kc1dpdGgodGhpcy5fZmlsZUV4dGVuc2lvbikgPT09IGZhbHNlID8gdGhpcy5fZmlsZUV4dGVuc2lvbiA6ICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmaWxlIG5hbWUgd2hpY2ggd2lsbCBiZSB1c2VkIGZvciB0aGUgZXhwb3J0aW5nIG9wZXJhdGlvbi5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGZpbGVOYW1lID0gdGhpcy5leHBvcnRPcHRpb25zLmZpbGVOYW1lO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIElneEV4cG9ydGVyT3B0aW9uc0Jhc2VcbiAgICAgKi9cbiAgICBnZXQgZmlsZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWxlTmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBmaWxlIG5hbWUgd2hpY2ggd2lsbCBiZSB1c2VkIGZvciB0aGUgZXhwb3J0aW5nIG9wZXJhdGlvbi5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5leHBvcnRPcHRpb25zLmZpbGVOYW1lID0gJ2V4cG9ydGVkRGF0YTAxJztcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeHBvcnRlck9wdGlvbnNCYXNlXG4gICAgICovXG4gICAgc2V0IGZpbGVOYW1lKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0RmlsZU5hbWUodmFsdWUpO1xuICAgIH1cblxufVxuIl19