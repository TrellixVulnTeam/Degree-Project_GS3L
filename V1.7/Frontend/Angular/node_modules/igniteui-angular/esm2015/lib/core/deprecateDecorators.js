import { isDevMode } from '@angular/core';
/**
 * @hidden
 */
export const DeprecateClass = (message) => {
    let isMessageShown = false;
    return (originalClass) => class extends originalClass {
        constructor(...args) {
            const target = originalClass;
            const targetName = typeof target === 'function' ? target.name : target.constructor.name;
            isMessageShown = showMessage(`${targetName}: ${message}`, isMessageShown);
            super(...args);
        }
    };
};
/**
 * @hidden
 */
export function DeprecateMethod(message) {
    let isMessageShown = false;
    return function (target, key, descriptor) {
        if (descriptor && descriptor.value) {
            const originalMethod = descriptor.value;
            descriptor.value = function () {
                const targetName = typeof target === 'function' ? target.name : target.constructor.name;
                isMessageShown = showMessage(`${targetName}.${key}: ${message}`, isMessageShown);
                return originalMethod.call(this, arguments);
            };
            return descriptor;
        }
    };
}
/**
 * @hidden
 */
export function DeprecateProperty(message) {
    return function (target, key) {
        let isMessageShown = false;
        const messageToDisplay = `${target.constructor.name}.${key}: ${message}`;
        // if the target already has the property defined
        const originalDescriptor = Object.getOwnPropertyDescriptor(target, key);
        if (originalDescriptor) {
            const getter = originalDescriptor.get;
            const setter = originalDescriptor.set;
            if (getter) {
                originalDescriptor.get = function () {
                    isMessageShown = showMessage(messageToDisplay, isMessageShown);
                    return getter.call(this);
                };
            }
            if (setter) {
                originalDescriptor.set = function (value) {
                    isMessageShown = showMessage(messageToDisplay, isMessageShown);
                    setter.call(this, value);
                };
            }
            return originalDescriptor;
        }
        // the target doesn't contain a descriptor for that property, so create one
        // use backing field to set/get the value of the property to ensure there won't be infinite recursive calls
        const newKey = generateUniqueKey(target, key);
        Object.defineProperty(target, key, {
            configurable: true,
            enumerable: true,
            set(value) {
                isMessageShown = showMessage(messageToDisplay, isMessageShown);
                this[newKey] = value;
            },
            get() {
                isMessageShown = showMessage(messageToDisplay, isMessageShown);
                return this[newKey];
            }
        });
    };
}
/**
 * @hidden
 */
const generateUniqueKey = (target, key) => {
    let newKey = '_' + key;
    while (target.hasOwnProperty(newKey)) {
        newKey = '_' + newKey;
    }
    return newKey;
};
const ɵ0 = generateUniqueKey;
/**
 * @hidden
 */
export const showMessage = (message, isMessageShown) => {
    if (!isMessageShown && isDevMode()) {
        console.warn(message);
    }
    return true;
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwcmVjYXRlRGVjb3JhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL2RlcHJlY2F0ZURlY29yYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO0lBQzlDLElBQUksY0FBYyxHQUFHLEtBQUssQ0FBQztJQUUzQixPQUFPLENBQXVDLGFBQWdCLEVBQUUsRUFBRSxDQUFDLEtBQU0sU0FBUSxhQUFhO1FBQzFGLFlBQVksR0FBRyxJQUFJO1lBQ2YsTUFBTSxNQUFNLEdBQVEsYUFBYSxDQUFDO1lBQ2xDLE1BQU0sVUFBVSxHQUFHLE9BQU8sTUFBTSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7WUFDeEYsY0FBYyxHQUFHLFdBQVcsQ0FBQyxHQUFHLFVBQVUsS0FBSyxPQUFPLEVBQUUsRUFBRSxjQUFjLENBQUMsQ0FBQztZQUUxRSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNuQixDQUFDO0tBQ0osQ0FBQztBQUNOLENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxPQUFlO0lBQzNDLElBQUksY0FBYyxHQUFHLEtBQUssQ0FBQztJQUUzQixPQUFPLFVBQVMsTUFBVyxFQUFFLEdBQVcsRUFBRSxVQUE4QjtRQUNwRSxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsS0FBSyxFQUFFO1lBQ2hDLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7WUFFeEMsVUFBVSxDQUFDLEtBQUssR0FBRztnQkFDZixNQUFNLFVB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QUFlLEVBQUUsY0FBdUIsRUFBVyxFQUFFO0lBQzdFLElBQUksQ0FBQyxjQUFjLElBQUksU0FBUyxFQUFFLEVBQUU7UUFDaEMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN6QjtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRGV2TW9kZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNvbnN0IERlcHJlY2F0ZUNsYXNzID0gKG1lc3NhZ2U6IHN0cmluZykgPT4ge1xuICAgIGxldCBpc01lc3NhZ2VTaG93biA9IGZhbHNlO1xuXG4gICAgcmV0dXJuIDxUIGV4dGVuZHMgbmV3KC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KG9yaWdpbmFsQ2xhc3M6IFQpID0+IGNsYXNzIGV4dGVuZHMgb3JpZ2luYWxDbGFzcyB7XG4gICAgICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldDogYW55ID0gb3JpZ2luYWxDbGFzcztcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldE5hbWUgPSB0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nID8gdGFyZ2V0Lm5hbWUgOiB0YXJnZXQuY29uc3RydWN0b3IubmFtZTtcbiAgICAgICAgICAgIGlzTWVzc2FnZVNob3duID0gc2hvd01lc3NhZ2UoYCR7dGFyZ2V0TmFtZX06ICR7bWVzc2FnZX1gLCBpc01lc3NhZ2VTaG93bik7XG5cbiAgICAgICAgICAgIHN1cGVyKC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gRGVwcmVjYXRlTWV0aG9kKG1lc3NhZ2U6IHN0cmluZyk6IE1ldGhvZERlY29yYXRvciB7XG4gICAgbGV0IGlzTWVzc2FnZVNob3duID0gZmFsc2U7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0OiBhbnksIGtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZSkge1xuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxNZXRob2QgPSBkZXNjcmlwdG9yLnZhbHVlO1xuXG4gICAgICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0TmFtZSA9IHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicgPyB0YXJnZXQubmFtZSA6IHRhcmdldC5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICAgICAgICAgIGlzTWVzc2FnZVNob3duID0gc2hvd01lc3NhZ2UoYCR7dGFyZ2V0TmFtZX0uJHtrZXl9OiAke21lc3NhZ2V9YCwgaXNNZXNzYWdlU2hvd24pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsTWV0aG9kLmNhbGwodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBEZXByZWNhdGVQcm9wZXJ0eShtZXNzYWdlOiBzdHJpbmcpOiBQcm9wZXJ0eURlY29yYXRvciB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHRhcmdldDogYW55LCBrZXk6IHN0cmluZykge1xuICAgICAgICBsZXQgaXNNZXNzYWdlU2hvd24gPSBmYWxzZTtcbiAgICAgICAgY29uc3QgbWVzc2FnZVRvRGlzcGxheSA9IGAke3RhcmdldC5jb25zdHJ1Y3Rvci5uYW1lfS4ke2tleX06ICR7bWVzc2FnZX1gO1xuXG4gICAgICAgIC8vIGlmIHRoZSB0YXJnZXQgYWxyZWFkeSBoYXMgdGhlIHByb3BlcnR5IGRlZmluZWRcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICAgIGlmIChvcmlnaW5hbERlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIGNvbnN0IGdldHRlciA9IG9yaWdpbmFsRGVzY3JpcHRvci5nZXQ7XG4gICAgICAgICAgICBjb25zdCBzZXR0ZXIgPSBvcmlnaW5hbERlc2NyaXB0b3Iuc2V0O1xuXG4gICAgICAgICAgICBpZiAoZ2V0dGVyKSB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxEZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpc01lc3NhZ2VTaG93biA9IHNob3dNZXNzYWdlKG1lc3NhZ2VUb0Rpc3BsYXksIGlzTWVzc2FnZVNob3duKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldHRlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZXR0ZXIpIHtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbERlc2NyaXB0b3Iuc2V0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNNZXNzYWdlU2hvd24gPSBzaG93TWVzc2FnZShtZXNzYWdlVG9EaXNwbGF5LCBpc01lc3NhZ2VTaG93bik7XG4gICAgICAgICAgICAgICAgICAgIHNldHRlci5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxEZXNjcmlwdG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhlIHRhcmdldCBkb2Vzbid0IGNvbnRhaW4gYSBkZXNjcmlwdG9yIGZvciB0aGF0IHByb3BlcnR5LCBzbyBjcmVhdGUgb25lXG4gICAgICAgIC8vIHVzZSBiYWNraW5nIGZpZWxkIHRvIHNldC9nZXQgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSB0byBlbnN1cmUgdGhlcmUgd29uJ3QgYmUgaW5maW5pdGUgcmVjdXJzaXZlIGNhbGxzXG4gICAgICAgIGNvbnN0IG5ld0tleSA9IGdlbmVyYXRlVW5pcXVlS2V5KHRhcmdldCwga2V5KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaXNNZXNzYWdlU2hvd24gPSBzaG93TWVzc2FnZShtZXNzYWdlVG9EaXNwbGF5LCBpc01lc3NhZ2VTaG93bik7XG4gICAgICAgICAgICAgICAgdGhpc1tuZXdLZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIGlzTWVzc2FnZVNob3duID0gc2hvd01lc3NhZ2UobWVzc2FnZVRvRGlzcGxheSwgaXNNZXNzYWdlU2hvd24pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW25ld0tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5jb25zdCBnZW5lcmF0ZVVuaXF1ZUtleSA9ICh0YXJnZXQ6IGFueSwga2V5OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgIGxldCBuZXdLZXkgPSAnXycgKyBrZXk7XG4gICAgd2hpbGUgKHRhcmdldC5oYXNPd25Qcm9wZXJ0eShuZXdLZXkpKSB7XG4gICAgICAgIG5ld0tleSA9ICdfJyArIG5ld0tleTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3S2V5O1xufTtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjb25zdCBzaG93TWVzc2FnZSA9IChtZXNzYWdlOiBzdHJpbmcsIGlzTWVzc2FnZVNob3duOiBib29sZWFuKTogYm9vbGVhbiA9PiB7XG4gICAgaWYgKCFpc01lc3NhZ2VTaG93biAmJiBpc0Rldk1vZGUoKSkge1xuICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59O1xuIl19