import { DateRangePickerResourceStringsEN } from './date-range-picker-resources';
import { GridResourceStringsEN } from './grid-resources';
import { TimePickerResourceStringsEN } from './time-picker-resources';
import { PaginatorResourceStringsEN } from './paginator-resources';
import { cloneValue } from '../utils';
import { CarouselResourceStringsEN } from './carousel-resources';
import { ListResourceStringsEN } from './list-resources';
import { CalendarResourceStringsEN } from './calendar-resources';
/**
 * @hidden
 */
export const CurrentResourceStrings = {
    GridResStrings: cloneValue(GridResourceStringsEN),
    PaginatorResStrings: cloneValue(PaginatorResourceStringsEN),
    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN),
    CalendarResStrings: cloneValue(CalendarResourceStringsEN),
    DateRangePickerResStrings: cloneValue(DateRangePickerResourceStringsEN),
    CarouselResStrings: cloneValue(CarouselResourceStringsEN),
    ListResStrings: cloneValue(ListResourceStringsEN),
};
const updateResourceStrings = (currentStrings, newStrings) => {
    for (const key of Object.keys(newStrings)) {
        if (key in currentStrings) {
            currentStrings[key] = newStrings[key];
        }
    }
};
const ɵ0 = updateResourceStrings;
/**
 * Changes the resource strings for all components in the application
 * ```
 * @param resourceStrings to be applied
 */
export const changei18n = (resourceStrings) => {
    for (const key of Object.keys(CurrentResourceStrings)) {
        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);
    }
};
/**
 * Returns current resource strings for all components
 */
export const getCurrentResourceStrings = () => (Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, CurrentResourceStrings.CalendarResStrings), CurrentResourceStrings.CarouselResStrings), CurrentResourceStrings.DateRangePickerResStrings), CurrentResourceStrings.GridResStrings), CurrentResourceStrings.ListResStrings), CurrentResourceStrings.PaginatorResStrings), CurrentResourceStrings.TimePickerResStrings));
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjLyIsInNvdXJjZXMiOlsibGliL2NvcmUvaTE4bi9yZXNvdXJjZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdDQUFnQyxFQUFtQyxNQUFNLCtCQUErQixDQUFDO0FBQ2xILE9BQU8sRUFBd0IscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMvRSxPQUFPLEVBQThCLDJCQUEyQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDbEcsT0FBTyxFQUE2QiwwQkFBMEIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUE0Qix5QkFBeUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzNGLE9BQU8sRUFBd0IscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMvRSxPQUFPLEVBQUUseUJBQXlCLEVBQTRCLE1BQU0sc0JBQXNCLENBQUM7QUFLM0Y7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRztJQUNsQyxjQUFjLEVBQUUsVUFBVSxDQUFDLHFCQUFxQixDQUFDO0lBQ2pELG1CQUFtQixFQUFFLFVBQVUsQ0FBQywwQkFBMEIsQ0FBQztJQUMzRCxvQkFBb0IsRUFBRSxVQUFVLENBQUMsMkJBQTJCLENBQUM7SUFDN0Qsa0JBQWtCLEVBQUUsVUFBVSxDQUFDLHlCQUF5QixDQUFDO0lBQ3pELHlCQUF5QixFQUFFLFVBQVUsQ0FBQyxnQ0FBZ0MsQ0FBQztJQUN2RSxrQkFBa0IsRUFBRSxVQUFVLENBQUMseUJBQXlCLENBQUM7SUFDekQsY0FBYyxFQUFFLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQztDQUNwRCxDQUFDO0FBRUYsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLGNBQWdDLEVBQUUsVUFBNEIsRUFBRSxFQUFFO0lBQzdGLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUN2QyxJQUFJLEdBQUcsSUFBSSxjQUFjLEVBQUU7WUFDdkIsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN6QztLQUNKO0FBQ0wsQ0FBQyxDQUFDOztBQUVGOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxlQUFpQyxFQUFFLEVBQUU7SUFDNUQsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEVBQUU7UUFDbkQscUJBQXFCLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7S0FDdkU7QUFDTCxDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLEdBQXFCLEVBQUUsQ0FBQyx1R0FDMUQsc0JBQXNCLENBQUMsa0JBQWtCLEdBQ3pDLHNCQUFzQixDQUFDLGtCQUFrQixHQUN6QyxzQkFBc0IsQ0FBQyx5QkFBeUIsR0FDaEQsc0JBQXNCLENBQUMsY0FBYyxHQUNyQyxzQkFBc0IsQ0FBQyxjQUFjLEdBQ3JDLHNCQUFzQixDQUFDLG1CQUFtQixHQUMxQyxzQkFBc0IsQ0FBQyxvQkFBb0IsRUFDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGVSYW5nZVBpY2tlclJlc291cmNlU3RyaW5nc0VOLCBJRGF0ZVJhbmdlUGlja2VyUmVzb3VyY2VTdHJpbmdzIH0gZnJvbSAnLi9kYXRlLXJhbmdlLXBpY2tlci1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgSUdyaWRSZXNvdXJjZVN0cmluZ3MsIEdyaWRSZXNvdXJjZVN0cmluZ3NFTiB9IGZyb20gJy4vZ3JpZC1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgSVRpbWVQaWNrZXJSZXNvdXJjZVN0cmluZ3MsIFRpbWVQaWNrZXJSZXNvdXJjZVN0cmluZ3NFTiB9IGZyb20gJy4vdGltZS1waWNrZXItcmVzb3VyY2VzJztcbmltcG9ydCB7IElQYWdpbmF0b3JSZXNvdXJjZVN0cmluZ3MsIFBhZ2luYXRvclJlc291cmNlU3RyaW5nc0VOIH0gZnJvbSAnLi9wYWdpbmF0b3ItcmVzb3VyY2VzJztcbmltcG9ydCB7IGNsb25lVmFsdWUgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBJQ2Fyb3VzZWxSZXNvdXJjZVN0cmluZ3MsIENhcm91c2VsUmVzb3VyY2VTdHJpbmdzRU4gfSBmcm9tICcuL2Nhcm91c2VsLXJlc291cmNlcyc7XG5pbXBvcnQgeyBJTGlzdFJlc291cmNlU3RyaW5ncywgTGlzdFJlc291cmNlU3RyaW5nc0VOIH0gZnJvbSAnLi9saXN0LXJlc291cmNlcyc7XG5pbXBvcnQgeyBDYWxlbmRhclJlc291cmNlU3RyaW5nc0VOLCBJQ2FsZW5kYXJSZXNvdXJjZVN0cmluZ3MgfSBmcm9tICcuL2NhbGVuZGFyLXJlc291cmNlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJlc291cmNlU3RyaW5ncyBleHRlbmRzIElHcmlkUmVzb3VyY2VTdHJpbmdzLCBJVGltZVBpY2tlclJlc291cmNlU3RyaW5ncywgSUNhbGVuZGFyUmVzb3VyY2VTdHJpbmdzLFxuICAgIElDYXJvdXNlbFJlc291cmNlU3RyaW5ncywgSURhdGVSYW5nZVBpY2tlclJlc291cmNlU3RyaW5ncywgSUxpc3RSZXNvdXJjZVN0cmluZ3MsIElQYWdpbmF0b3JSZXNvdXJjZVN0cmluZ3MgeyB9XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY29uc3QgQ3VycmVudFJlc291cmNlU3RyaW5ncyA9IHtcbiAgICBHcmlkUmVzU3RyaW5nczogY2xvbmVWYWx1ZShHcmlkUmVzb3VyY2VTdHJpbmdzRU4pLFxuICAgIFBhZ2luYXRvclJlc1N0cmluZ3M6IGNsb25lVmFsdWUoUGFnaW5hdG9yUmVzb3VyY2VTdHJpbmdzRU4pLFxuICAgIFRpbWVQaWNrZXJSZXNTdHJpbmdzOiBjbG9uZVZhbHVlKFRpbWVQaWNrZXJSZXNvdXJjZVN0cmluZ3NFTiksXG4gICAgQ2FsZW5kYXJSZXNTdHJpbmdzOiBjbG9uZVZhbHVlKENhbGVuZGFyUmVzb3VyY2VTdHJpbmdzRU4pLFxuICAgIERhdGVSYW5nZVBpY2tlclJlc1N0cmluZ3M6IGNsb25lVmFsdWUoRGF0ZVJhbmdlUGlja2VyUmVzb3VyY2VTdHJpbmdzRU4pLFxuICAgIENhcm91c2VsUmVzU3RyaW5nczogY2xvbmVWYWx1ZShDYXJvdXNlbFJlc291cmNlU3RyaW5nc0VOKSxcbiAgICBMaXN0UmVzU3RyaW5nczogY2xvbmVWYWx1ZShMaXN0UmVzb3VyY2VTdHJpbmdzRU4pLFxufTtcblxuY29uc3QgdXBkYXRlUmVzb3VyY2VTdHJpbmdzID0gKGN1cnJlbnRTdHJpbmdzOiBJUmVzb3VyY2VTdHJpbmdzLCBuZXdTdHJpbmdzOiBJUmVzb3VyY2VTdHJpbmdzKSA9PiB7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMobmV3U3RyaW5ncykpIHtcbiAgICAgICAgaWYgKGtleSBpbiBjdXJyZW50U3RyaW5ncykge1xuICAgICAgICAgICAgY3VycmVudFN0cmluZ3Nba2V5XSA9IG5ld1N0cmluZ3Nba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICogQ2hhbmdlcyB0aGUgcmVzb3VyY2Ugc3RyaW5ncyBmb3IgYWxsIGNvbXBvbmVudHMgaW4gdGhlIGFwcGxpY2F0aW9uXG4gKiBgYGBcbiAqIEBwYXJhbSByZXNvdXJjZVN0cmluZ3MgdG8gYmUgYXBwbGllZFxuICovXG5leHBvcnQgY29uc3QgY2hhbmdlaTE4biA9IChyZXNvdXJjZVN0cmluZ3M6IElSZXNvdXJjZVN0cmluZ3MpID0+IHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhDdXJyZW50UmVzb3VyY2VTdHJpbmdzKSkge1xuICAgICAgICB1cGRhdGVSZXNvdXJjZVN0cmluZ3MoQ3VycmVudFJlc291cmNlU3RyaW5nc1trZXldLCByZXNvdXJjZVN0cmluZ3MpO1xuICAgIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBjdXJyZW50IHJlc291cmNlIHN0cmluZ3MgZm9yIGFsbCBjb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRDdXJyZW50UmVzb3VyY2VTdHJpbmdzID0gKCk6IElSZXNvdXJjZVN0cmluZ3MgPT4gKHtcbiAgICAuLi5DdXJyZW50UmVzb3VyY2VTdHJpbmdzLkNhbGVuZGFyUmVzU3RyaW5ncyxcbiAgICAuLi5DdXJyZW50UmVzb3VyY2VTdHJpbmdzLkNhcm91c2VsUmVzU3RyaW5ncyxcbiAgICAuLi5DdXJyZW50UmVzb3VyY2VTdHJpbmdzLkRhdGVSYW5nZVBpY2tlclJlc1N0cmluZ3MsXG4gICAgLi4uQ3VycmVudFJlc291cmNlU3RyaW5ncy5HcmlkUmVzU3RyaW5ncyxcbiAgICAuLi5DdXJyZW50UmVzb3VyY2VTdHJpbmdzLkxpc3RSZXNTdHJpbmdzLFxuICAgIC4uLkN1cnJlbnRSZXNvdXJjZVN0cmluZ3MuUGFnaW5hdG9yUmVzU3RyaW5ncyxcbiAgICAuLi5DdXJyZW50UmVzb3VyY2VTdHJpbmdzLlRpbWVQaWNrZXJSZXNTdHJpbmdzXG59KTtcbiJdfQ==