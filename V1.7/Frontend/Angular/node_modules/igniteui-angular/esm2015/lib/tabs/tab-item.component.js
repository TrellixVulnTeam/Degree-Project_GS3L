import { Component, ContentChild, ElementRef, HostBinding, HostListener, Input, TemplateRef, ViewChild, NgZone } from '@angular/core';
import { IgxTabItemBase, IgxTabsBase } from './tabs.common';
import { IgxTabItemTemplateDirective } from './tabs.directives';
import ResizeObserver from 'resize-observer-polyfill';
export class IgxTabItemComponent extends IgxTabItemBase {
    constructor(_tabs, _element, _ngZone) {
        super();
        this._tabs = _tabs;
        this._element = _element;
        this._ngZone = _ngZone;
        /**
         * @hidden @internal
         */
        this.role = 'tab';
        /**
         * @hidden @internal
         */
        this.tabindex = -1;
        /**
         * @hidden @internal
         */
        this.ariaLabel = this.label;
        /**
         * @hidden @internal
         */
        this.ariaDisabled = this.disabled;
        /**
         * @hidden @internal
         */
        this.ariaSelected = this.isSelected;
        this._changesCount = 0; // changes and updates accordingly applied to the tab.
        this._isSelected = false;
        this._disabled = false;
        this._nativeTabItem = _element;
    }
    /**
     * An @Input property that sets the value of the `icon`.
     * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.
     * ```html
     * <igx-tab-item label="Tab 1" icon="home">
     * ```
     */
    get icon() {
        return this.relatedGroup ? this.relatedGroup.icon : this._icon;
    }
    set icon(newValue) {
        if (this.relatedGroup) {
            this.relatedGroup.icon = newValue;
        }
        this._icon = newValue;
    }
    /**
     * An @Input property that sets the value of the `label`.
     * ```html
     * <igx-tabs-item label="Tab 2" icon="folder">
     * ```
     */
    get label() {
        return this.relatedGroup ? this.relatedGroup.label : this._label;
    }
    set label(newValue) {
        if (this.relatedGroup) {
            this.relatedGroup.label = newValue;
        }
        this._label = newValue;
    }
    get provideCssClassSelected() {
        return this.isSelected;
    }
    get provideCssClassDisabled() {
        return this.disabled;
    }
    get provideCssClass() {
        return (!this.disabled && !this.isSelected);
    }
    /**
     * @hidden
     */
    onClick(event) {
        if (this.autoGenerated) {
            this.select();
        }
    }
    /**
     * @hidden
     */
    onKeydown(event) {
        const tabsArray = this._tabs.tabs.toArray();
        const startIndex = tabsArray.indexOf(this);
        let finalIndex = -1;
        let currentIndex = startIndex;
        switch (event.key) {
            case "ArrowRight" /* RIGHT_ARROW */:
            case "Right" /* RIGHT_ARROW_IE */:
                do {
                    currentIndex++;
                    if (currentIndex === tabsArray.length) {
                        currentIndex = -1;
                        continue;
                    }
                    else if (tabsArray[currentIndex].disabled === false) {
                        finalIndex = currentIndex;
                        break;
                    }
                } while (currentIndex !== startIndex);
                break;
            case "ArrowLeft" /* LEFT_ARROW */:
            case "Left" /* LEFT_ARROW_IE */:
                do {
                    currentIndex--;
                    if (currentIndex === -1) {
                        currentIndex = tabsArray.length;
                        continue;
                    }
                    else if (tabsArray[currentIndex].disabled === false) {
                        finalIndex = currentIndex;
                        break;
                    }
                } while (currentIndex !== startIndex);
                break;
            case "Home" /* HOME */:
                event.preventDefault();
                finalIndex = tabsArray.find(t => t.disabled === false).index;
                break;
            case "End" /* END */:
                event.preventDefault();
                finalIndex = tabsArray.slice().reverse().find(t => t.disabled === false).index;
                break;
            case "Enter" /* ENTER */:
                if (!this.autoGenerated) {
                    this.nativeTabItem.nativeElement.click();
                }
                break;
            case " " /* SPACE */:
            case "Spacebar" /* SPACE_IE */:
                event.preventDefault();
                if (!this.autoGenerated) {
                    this.nativeTabItem.nativeElement.click();
                }
                break;
            default:
                break;
        }
        if (finalIndex > -1) {
            const tab = tabsArray[finalIndex];
            tab.nativeTabItem.nativeElement.focus();
            if (this.autoGenerated) {
                tab.select();
            }
        }
    }
    ngAfterViewInit() {
        this._ngZone.runOutsideAngular(() => {
            this._resizeObserver = new ResizeObserver(() => {
                this._tabs.transformIndicatorAnimation(this._nativeTabItem.nativeElement, 0);
            });
        });
    }
    ngOnDestroy() {
        this._ngZone.runOutsideAngular(() => {
            this._resizeObserver.disconnect();
        });
    }
    /**
     * @hidden
     */
    get changesCount() {
        return this._changesCount;
    }
    /**
     * @hidden
     */
    get nativeTabItem() {
        return this._nativeTabItem;
    }
    /**
     * 	Gets whether the tab is disabled.
     * ```
     * const disabledItem = this.myTabComponent.tabs.first.disabled;
     * ```
     */
    get disabled() {
        return this.relatedGroup ? this.relatedGroup.disabled : this._disabled;
    }
    set disabled(newValue) {
        if (this.relatedGroup) {
            this.relatedGroup.disabled = newValue;
        }
        else {
            this._disabled = newValue;
        }
    }
    /**
     * Gets whether the tab is selected.
     * ```typescript
     * const selectedItem = this.myTabComponent.tabs.first.isSelected;
     * ```
     */
    get isSelected() {
        return this.relatedGroup ? this.relatedGroup.isSelected : this._isSelected;
    }
    set isSelected(newValue) {
        if (!this.disabled && this.isSelected !== newValue) {
            this._tabs.performSelectionChange(newValue ? this : null);
        }
    }
    /**
     * @hidden
     */
    select() {
        if (!this.disabled && !this.isSelected) {
            this._tabs.performSelectionChange(this);
        }
    }
    /**
     * @hidden
     */
    get index() {
        if (this._tabs.tabs) {
            return this._tabs.tabs.toArray().indexOf(this);
        }
        return -1;
    }
    /**
     * @hidden
     */
    setSelectedInternal(newValue) {
        this._isSelected = newValue;
        this._ngZone.runOutsideAngular(() => {
            if (this._resizeObserver) {
                if (this._isSelected) {
                    this._resizeObserver.observe(this._element.nativeElement);
                }
                else {
                    this._resizeObserver.disconnect();
                }
            }
        });
        this.tabindex = newValue ? 0 : -1;
    }
    /**
     * @hidden
     */
    get template() {
        if (this.relatedGroup && this.relatedGroup.customTabTemplate) {
            return this.relatedGroup.customTabTemplate;
        }
        if (this.customTabTemplateDir) {
            return this.customTabTemplateDir.template;
        }
        return this.defaultTabTemplate;
    }
    /**
     * @hidden
     */
    get context() {
        return this.relatedGroup ? this.relatedGroup : this;
    }
}
IgxTabItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-tab-item',
                template: "<ng-template #defaultTabTemplate let-context>\n    <div *ngIf=\"context.icon\" class=\"igx-tabs__header-menu-item-icon\">\n        <igx-icon fontSet=\"material\">{{context.icon}}</igx-icon>\n        <igx-badge [value]=\"changesCount\" [hidden]=\"changesCount === 0\"></igx-badge>\n    </div>\n    <div *ngIf=\"context.label\" ngClass=\"igx-tabs__item-label\">{{context.label}}</div>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"template; context: { $implicit: this.context }\">\n</ng-container>"
            },] }
];
IgxTabItemComponent.ctorParameters = () => [
    { type: IgxTabsBase },
    { type: ElementRef },
    { type: NgZone }
];
IgxTabItemComponent.propDecorators = {
    autoGenerated: [{ type: Input }],
    relatedGroup: [{ type: Input }],
    role: [{ type: HostBinding, args: ['attr.role',] }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    ariaLabel: [{ type: HostBinding, args: ['attr.aria-label',] }],
    ariaDisabled: [{ type: HostBinding, args: ['attr.aria-disabled',] }],
    ariaSelected: [{ type: HostBinding, args: ['attr.aria-selected',] }],
    defaultTabTemplate: [{ type: ViewChild, args: ['defaultTabTemplate', { read: TemplateRef, static: true },] }],
    customTabTemplateDir: [{ type: ContentChild, args: [IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective },] }],
    icon: [{ type: Input }],
    label: [{ type: Input }],
    provideCssClassSelected: [{ type: HostBinding, args: ['class.igx-tabs__header-menu-item--selected',] }],
    provideCssClassDisabled: [{ type: HostBinding, args: ['class.igx-tabs__header-menu-item--disabled',] }],
    provideCssClass: [{ type: HostBinding, args: ['class.igx-tabs__header-menu-item',] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    disabled: [{ type: Input }],
    isSelected: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,